2024-12-18 07:18:54 - INFO - Static files mounted
2024-12-18 07:18:54 - INFO - toLetter filter added to Jinja2 environment
2024-12-18 07:18:54 - INFO - GET request received for index page
2024-12-18 07:19:07 - INFO - POST request received for /generate
2024-12-18 07:19:07 - INFO - Form data: title='Operating Systems Test 1' course='Operating Systems' professor='Dr. Park' number_of_written_questions=1 number_of_mcq_questions=2 number_of_TF_questions=2 level='Normal' school_type='Undergraduate' difficulty='Extreme' testing_philosophy='Fail all the students' url_1=None url_2=None subject_material=[UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))]
2024-12-18 07:19:07 - INFO - Starting run function
2024-12-18 07:19:07 - INFO - Form data accessed
2024-12-18 07:19:07 - INFO - Form Title: Operating Systems Test 1
2024-12-18 07:19:07 - INFO - Form Course: Operating Systems
2024-12-18 07:19:07 - INFO - Form Professor: Dr. Park
2024-12-18 07:19:07 - INFO - Form Number of MCQ Questions: 2
2024-12-18 07:19:07 - INFO - Form Number of TF Questions: 2
2024-12-18 07:19:07 - INFO - Form Number of Written Questions: 1
2024-12-18 07:19:07 - INFO - Form School Type: Undergraduate
2024-12-18 07:19:07 - INFO - Form Difficulty: Extreme
2024-12-18 07:19:07 - INFO - Form Testing Philosophy: Fail all the students
2024-12-18 07:19:07 - INFO - Moving to files...
2024-12-18 07:19:07 - INFO - Starting to process files
2024-12-18 07:19:07 - INFO - Processing file: 450Slides9.pdf
2024-12-18 07:19:07 - INFO - Getting loader for file: UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - File extension: .pdf
2024-12-18 07:19:07 - INFO - Processing PDF file: 450Slides9.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - Processing file: 450Slides11.pdf
2024-12-18 07:19:07 - INFO - Getting loader for file: UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - File extension: .pdf
2024-12-18 07:19:07 - INFO - Processing PDF file: 450Slides11.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - Processing file: cosc450_11.pdf
2024-12-18 07:19:07 - INFO - Getting loader for file: UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - File extension: .pdf
2024-12-18 07:19:07 - INFO - Processing PDF file: cosc450_11.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - Processing file: 450Slides10.pdf
2024-12-18 07:19:07 - INFO - Getting loader for file: UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - File extension: .pdf
2024-12-18 07:19:07 - INFO - Processing PDF file: 450Slides10.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:07 - INFO - URLs: []
2024-12-18 07:19:07 - INFO - Processing 4 files and 0 URLs
2024-12-18 07:19:07 - INFO - Processing 450Slides9.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for 450Slides9.pdf
2024-12-18 07:19:07 - INFO - Processing 450Slides9.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Processing 450Slides11.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for 450Slides11.pdf
2024-12-18 07:19:07 - INFO - Processing 450Slides11.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Processing cosc450_11.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for cosc450_11.pdf
2024-12-18 07:19:07 - INFO - Processing cosc450_11.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Processing 450Slides10.pdf
2024-12-18 07:19:07 - INFO - Using loader type: PyMuPDFLoader for 450Slides10.pdf
2024-12-18 07:19:07 - INFO - Processing 450Slides10.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Successfully loaded 5 documents from: 450Slides10.pdf
2024-12-18 07:19:07 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n1\nPreview\nInter-Process Communication\n\ue007Race Condition\n\ue007Critical Section (or region)\n\ue007Solutions for Mutual Exclusion in a Critical Section\n◼With Busy Waiting\n\ue007Disabling Interrupts –non-preemptive kernel\n\ue007Lock Variables –violating the first necessary condition (mutual exclusion )\n\ue007Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\ue007Peterson’s Solution\n\ue007Hardware Solution\n▪\nTest and Set Lock –\n▪\nMemory Barriers\n▪\nAtomic Variable\n\ue007Priority Inversion problems with busy waiting\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n1\nInterprocess Communication\n\ue007\nThree issues in interprocess communication\n1.\nHow one process can pass information to another (communication\nbetween processes) – with IPCS (shared memory, message queue,\nFIFO, PIPE, socket, …)\n2.\nHow to make sure two or more processes do not get into the\ncritical section (mutual exclusion)- with mutex, semaphore\n3.\nProper sequencing (Synchronization) when dependencies are\npresent (ex. A create outputs, B consume the outputs)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n2\nInterprocess Communication\n(Race Condition)\n\ue007Race Condition\n◼A situation where two or more processes are reading or writing some shared\ndata and the final result depends on who runs precisely when, are called race\ncondition.\n\ue007Critical section (critical region)\n◼The part of program where the shared memory is accessed.\n\ue007Mutual Exclusion in a critical section can avoid races condition:\n◼If we could arrange matters such that no two processes were ever in their\ncritical regions at the same time, we can avoid races condition.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n3\nInterprocess Communication\n(Race Condition)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n4\nSlots for file names\n• When a process want\nto print a file, it enter a\nfile name in a special\nspooler directory in\nprinter\n• Printer daemon\nperiodically check\nspooler directory any file\nneed to be printed.\nShared variable\nInterprocess Communication\n(Race Condition)\n\ue007\nProcess A tried to send a job to\nspooler, Process A read in = 7,\nprocess A time out and go to ready\nstate before updating in = in + 1.\n\ue007\nProcess B tried to send a job to\nspooler. Process B read in = 7, load\nits job name in slot 7, update i = i +\n1 = 8 and then go to block state for\nwaiting for job.\n\ue007\nProcess A is rescheduled by\nscheduler. Process A already read in\n= 7, Process A load its job name in\nslot 7, update i = i + 1 = 9 and then\ngo to blocked state waiting for this\njob finish.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n5\nInterprocess Communication\n(Race Condition)\n\ue007How to avoid race condition?\nMutual exclusion – some way of making sure that if one process is using a\nshared variable or file, the other processes will be excluded from doing the same\nthing.\n\ue007The choice of the algorithm for achieving mutual exclusion is a\nmajor design issue in any operating system.\n\ue007A solution for the race condition should have following four\nconditions\n1.\nNo two processes may be simultaneously inside their critical regions – mutual\nexclusion\n2.\nNo process running outside its critical region may block other processes\n3.\nNo process should have to wait forever to enter critical region\n4.\nNo assumptions may be made about speeds or the number of CPUs.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n6\n'), Document(metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n2\nInterprocess Communication\n(Race Condition)\n\ue007Two approaches for mutual exclusion solutions.\n◼Busy wait – A process will wait until resource become available\nor CPU time term expired.\n◼Sleep and Wakeup – A process check a resource, if not available\ngo to sleep. When the resource become available, the process\nwill be waked up by system or the process release the resource.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n7\nMutual Exclusion with Busy Waiting\n\ue007Each process has time term. A process keep checking the\npossibility to get into critical section.\n\ue007Mutual Exclusion with Busy Waiting\n◼Disabling Interrupts –non-preemptive kernel\n◼Lock Variables\n◼Strict Alternation\n◼Peterson’s Solution\n◼Hardware Solutions\n\ue007Test and Set Lock\n\ue007Memory Barriers\n\ue007Atomic Variable\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n8\nMutual Exclusion with Busy Waiting\n(Disabling Interrupt – Nonprimitive Kernel)\nDisabling Interrupt\n\ue007Once a process get into the critical section, interrupts set to disable.\n\ue007Other process cannot get CPU time until the process finish its job in\nthe critical section.\n\ue007Since each user process has power to control interrupt, it might\ncause the end of system.\n\ue007We can build a simple program which can disable entire system\nsince user has control system interrupt. (vulnerable system)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n9\nMutual Exclusion with Busy Waiting\n(Disabling Interrupt – Nonprimitive Kernel)\nEx) End of the system with Disabling interrupt\n1. A process get into the critical section.\n2. It make disable all the interrupts – which means all\nother process are sleeping until the job is done in the\ncritical section.\n3. The process has blocked outside critical section just\nbefore make enable all the interrupts and never return\nagain, cause end of the system.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n10\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\n\ue007There are variable called “Lock”\n◼A process can enter in its critical section when Lock = 0.\n◼Lock =0 means no process is currently running in the critical\nsection, set Lock =1 and enter in the critical section.\n◼Once a process finish its job in critical section, set Lock = 0 and\nlet other process in the critical section\n◼Lock = 1 means there is a process running in the critical section,\na process do busy waiting until Lock become 0.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n11\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n12\nstatic int lock = 0; //lock variable is initially 0\nrepeat\nwhile lock \ue0060do\n; (no-operation) // Busy waiting\nlock = 1;\nlock = 0;\nuntil false\nCritical Section\nRemainder Section\n'), Document(metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n3\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n13\nstatic int lock = 0; //lock is initially 0\nrepeat\nwhile lock \ue0060 do\n; (no-operation) //busy waiting\nlock = 1;\nlock = 0;\nuntil false\nCritical Section\nRemainder Section\nScenario)\n1.\nInitially lock = 0.\n2.\nA process P1 tries get into critical section.\nThe process P1 check lock value = 0.\n3.\nProcess P1 CPU time is over and go to\nready state, before updating lock = 1.\n4.\nProcess P2 tries get into critical section.\nP2 check lock value lock = 0\n5.\nP2 set lock = 1 and go to critical section.\n6.\nP2 CPU time is over and P1 is rescheduled.\n7.\nP1 already read lock = 0, P1 set lock = 1\nand go to Critical section. Now P1 and P2\nare in the critical section at the same\ntime\nViolating condition #1: mutual exclusion\nMutual Exclusion with Busy Waiting\n(Strict Alternation)\n\ue007Variable turn can be i or j.\n\ue007if turn = i, process Pi can go to the\ncritical section.\n\ue007Once Pi finish its job in critical\nsection, Pi set turn = j, let process\nPj enter critical section\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n14\nCritical Section\nRemainder Section\nturn is i or j\nrepeat\nwhile turn \ue006i do\n; (no-operation)\nturn = j;\nuntil false\nMutual Exclusion with Busy Waiting\n(Strict Alternation)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n15\nCritical Section\nRemainder Section\nturn is i or j\nrepeat\nwhile turn \ue006i do\n; (no-operation)\nturn = j;\nuntil false\nLet assume initially turn = 0\n1.\nP0 is in CS while P1 is in remaining\nsection.\n2.\nP0 done C.S. and set turn = 1, P1 is\nstill in remaining section.\n3.\nP0 done remaining section and want\nto go to C.S. but turn= 1.\n4.\nP1 has fatal error in remainder\nsection and trapped out by OS.\n5.\nP0 is waiting forever to enter the C.S.\nViolating #2 and #3 condition\n2.\nNo process running outside its critical\nregion may block other processes\n3.\nNo process should have to wait forever to\nenter critical region\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\n\ue007Peterson’s solution provides a good algorithmic description of\nsolving the critical-section problem and illustrates some of the\ncomplexities involved in designing software that addresses the\nrequirements of mutual exclusion, progress, and bounded waiting.\n\ue007Peterson’s solution is restricted to two processes that alternate\nexecution between their critical sections and remainder sections.\n\ue007The processes are numbered P0 and P1.\n\ue007For convenience, when presenting Pi, we use Pj to denote the other\nprocess; that is, j equals 1 −i.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n16\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n17\n#define false 0\n#define true 1\n#define n 2\nint turn\nint interested[n]\nvoid enter_region(int process);\n{\nint other;\nother = 1 – process\ninterested[process] = true\nturn = process;\nwhile (turn ==process && interest[other]==true)\n; /*no operation –busy waiting*/\n}\nvoid leave_region(int process)\n{\ninterest[process] = false;\n}\nvoid main()\n{\nrepeat\nenter_region (int i)\nCritical Section\nleave_resion (int i)\nRemainder Section\nuntil false\n}\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\n1.\nInitially, neither process is in the critical section\n2.\nA process P0 call enter_region (0)\na)\nSet interested[0] = true;\nb)\nSet turn = 0\n3.\ngo to critical section\n4.\nthe process P1 call enter_region(1) to get into its critical section\na)\nset interested[1] = true;\nb)\nset turn = 1;\n5.\nsince interested[0] = true, it is keep looping for interest [0] =\nfalse\n6.\nfinally process P0 finish its critical section and call leave_region(0)\n1.\nset interested[0] = false\n7.\nnow P1 find out interest[0] = false, P1 goes to its critical section\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n18\n'), Document(metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n4\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\nProve for Peterson’s Solution)\n\ue007\nLets consider the case both P0 and P1 call enter_region(0) and enter_region(1) almost\nsimultaneously.\n\ue007\nLets interest[0]= true and interest[1] = true at the same time\n\ue007\nBut turn can be only turn = 0 or turn = 1 which ever store is done last is the one that\ncounts!!\nCase 1) turn = 0\nInside enter_region(0)\n◼\nSince turn =0 and interest [1] = ture, P0 keep looping in no-operation until P1 set interested[1] =\nfalse.\nInside enter_region(1)\n◼\nSince turn = 0 and interest[0] = true, P1 goes to its critical section.\nCase 2) turn = 1\nInside enter_region(0)\n◼\nSince turn =1 and interest [1] = ture,. P0 goes to its critical section\nInside enter_region(1)\n◼\nSince turn = 1 and interest[0] = true, P1 keep looping in no-operation until P0 set interested[0] =\nfalse.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n19\nMutual Exclusion with Busy Waiting\n(Test and Set Lock – hardware solution)\n\ue007\nSince TSL instruction is a hardware instruction. The operations of reading the\nlock and storing into register are guaranteed to be indivisible.\n\ue007\nInstruction test and set lock\nTSL RX, LOCK\n1. Read the content at the memory address of LOCK into register RX.\n2. Store a non-zero value at the memory address of LOCK\n\ue007\nThe operations of reading the content of LOCK and storing into it are guaranteed\nto be indivisible.\n\ue007\nHow to use Test and Set Lock instruction for solving race condition?\n◼\nWhen LOCK = 0, any process may set LOCK = 1 by using TSL instruction and go to\nits critical section.\n◼\nWhen the process finish its critical section, set LOCK = 0 using the original move\ninstruction.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n20\nMutual Exclusion with Busy Waiting\n(Test and Set Lock – hardware solution)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n21\nEnter_region\nTSL Register, LOCK\nCMP Register, #0\nJNE Enter_region\nSet LOCK, #1\nRET\nLeave_region\nMOVE LOCK, #0\nRET\nRepeat\nEnter_region\nLeave_region\nuntil false\nCritical Section\nRemainder Section\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007Two general memory models\n◼Strongly ordered Memory –a memory modification on one processor is\nimmediately visible to all other processors\n◼Weakly ordered Memory – a memory modification on one processor may not\nbe immediately visible to other processors.\n\ue007With Strongly ordered memory, computer architectures provide\ninstructions that can force any changes in memory to be\npropagated to all other processors, thereby ensuring that memory\nmodifications are visible to threads (or processes) running on other\nprocessors.\n\ue007Such instructions are known as memory barriers or memory\nfences.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n22\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007A memory barrier is a type of barrier instruction that causes a\ncentral processing unit (CPU) or compiler to enforce an ordering\nconstraint on memory operations issued before and after the\nbarrier instruction.\n\ue007This typically means that operations issued prior to the barrier are\nguaranteed to be performed before operations issued after the\nbarrier.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n23\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\nEx)\n\ue007Lets assume two threads (or processes) are running on different\npart of program by sharing two variables. (bool flag = false; int x=0;)\n\ue007Thread 1 might print 0 or 100 depends on the order of execution.\n\ue007By using memory barrier instruction Thread1 always print 100.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n24\nwhile (!flag)\nprint x;\nx = 100\nflag = true;\nThread 1\nThread 2\n'), Document(metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content="9/17/2024\n5\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007Now it is guarantee that the value of flag is loaded before the value of x\n\ue007Also it is guarantee that assignment to x occurs before the assignment to flag.\n\ue007So Thread 1 always print 100\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n25\nwhile (!flag)\nmemory_barrier();\nprint x;\nx = 100;\nmemory_barrier();\nflag = true;\nThread 1\nThread 2\nMutual Exclusion with Busy Waiting\n(Atomic Variables– hardware solution)\n\ue007We can avoid mutual exclusion by using atomic operations.\n\ue007When a thread (or process) performs an atomic operation, the\nother threads (or process) see it as happening instantaneously.\n\ue007The advantage of atomic operations is that they are relatively quick\ncompared to locks, and do not suffer from deadlock and convoying.\n\ue007The disadvantage is that they only do a limited set of operations,\nand often these are not enough to synthesize more complicated\noperations efficiently.\n\ue007But nonetheless you should not pass up an opportunity to use an\natomic operation in place of mutual exclusion.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n26\nMutual Exclusion with Busy Waiting\n(Priority Inversion Problem)\n\ue007Peterson's solution, test and set lock, Memory Barrier, Atomic variable method –\nbusy waiting – (wasting CPU time)\nPriority Inversion problem with busy waiting method\n\ue007A computer with two processes PH with high priorities, and PL with low priorities.\n\ue007The scheduling rules are such that PH get CPU time whenever it is in ready state.\n(preemptive priority scheduling)\n1. At a time T0: PL is in critical section, and PH is in block state.\n2. At a time T1: PH change sate from block to ready state and try to enter the critical\nsection. PL still in critical section.\n3. Based on scheduling rule, short-term scheduler select PH, PH hold CPU and try to enter\ninto critical section.\n4. Since PL is in critical section, PH run busy waiting outside critical section forever since\nPL does not have a chance to get CPU time to finish its critical section.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n27\nMutual Exclusion with Busy Waiting\n(Priority Inversion Problem)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n28\nBlock\nRunning\nReady\nT0 :\nPL: running state in critical section\nPH: block state\nPH\nPL\nBlock\nRunning\nReady\nPH\nPL\nT1 : PH become ready state\nPL: ready state in critical section\nPH: ready state\nCPU scheduler will select higher\npriority process\nBlock\nRunning\nReady\nPH\nPL\nTi>1\nPL: ready state in critical section\nPH: busy waiting in running state\nPH become ready state\nScheduler keep selecting\nPH since higher priority\nThe scheduling rules : CPU scheduler will always select higher priority process.\n")] for 450Slides10.pdf using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Document 1 (450Slides10.pdf) of 5
2024-12-18 07:19:07 - INFO - Starting clean_files_chain
2024-12-18 07:19:07 - INFO - Document: page_content='9/17/2024
1
Preview
Inter-Process Communication
Race Condition
Critical Section (or region)
Solutions for Mutual Exclusion in a Critical Section
◼With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution
▪
Test and Set Lock –
▪
Memory Barriers
▪
Atomic Variable
Priority Inversion problems with busy waiting
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
1
Interprocess Communication

Three issues in interprocess communication
1.
How one process can pass information to another (communication
between processes) – with IPCS (shared memory, message queue,
FIFO, PIPE, socket, …)
2.
How to make sure two or more processes do not get into the
critical section (mutual exclusion)- with mutex, semaphore
3.
Proper sequencing (Synchronization) when dependencies are
present (ex. A create outputs, B consume the outputs)
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
2
Interprocess Communication
(Race Condition)
Race Condition
◼A situation where two or more processes are reading or writing some shared
data and the final result depends on who runs precisely when, are called race
condition.
Critical section (critical region)
◼The part of program where the shared memory is accessed.
Mutual Exclusion in a critical section can avoid races condition:
◼If we could arrange matters such that no two processes were ever in their
critical regions at the same time, we can avoid races condition.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
3
Interprocess Communication
(Race Condition)
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
4
Slots for file names
• When a process want
to print a file, it enter a
file name in a special
spooler directory in
printer
• Printer daemon
periodically check
spooler directory any file
need to be printed.
Shared variable
Interprocess Communication
(Race Condition)

Process A tried to send a job to
spooler, Process A read in = 7,
process A time out and go to ready
state before updating in = in + 1.

Process B tried to send a job to
spooler. Process B read in = 7, load
its job name in slot 7, update i = i +
1 = 8 and then go to block state for
waiting for job.

Process A is rescheduled by
scheduler. Process A already read in
= 7, Process A load its job name in
slot 7, update i = i + 1 = 9 and then
go to blocked state waiting for this
job finish.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
5
Interprocess Communication
(Race Condition)
How to avoid race condition?
Mutual exclusion – some way of making sure that if one process is using a
shared variable or file, the other processes will be excluded from doing the same
thing.
The choice of the algorithm for achieving mutual exclusion is a
major design issue in any operating system.
A solution for the race condition should have following four
conditions
1.
No two processes may be simultaneously inside their critical regions – mutual
exclusion
2.
No process running outside its critical region may block other processes
3.
No process should have to wait forever to enter critical region
4.
No assumptions may be made about speeds or the number of CPUs.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
6
' metadata={'source': '/tmp/tmpjxp9jj_u', 'file_path': '/tmp/tmpjxp9jj_u', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}
2024-12-18 07:19:07 - INFO - Invoking chain
2024-12-18 07:19:07 - INFO - Successfully loaded 4 documents from: 450Slides9.pdf
2024-12-18 07:19:07 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpqt8ils07', 'file_path': '/tmp/tmpqt8ils07', 'page': 0, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content="9/17/2024\n1\nPreview\n\uf070Real-Time CPU Scheduling\n\uf06eMinimizing Latency\n\uf06ePreemptive Priority-Based Scheduling\n\uf06eRate-Monotonic Scheduling\n\uf06eEarliest-Deadline-First Scheduling\n\uf06eProportional Share Scheduling\n\uf070Criteria for selecting an algorithm\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nReal-Time CPU Scheduling \n\uf070CPU scheduling for real-time operating systems involves special \nissues. In general, we can distinguish between hard real-time \nsystems and soft real-time systems.\n\uf070Hard real-time systems - A task must be serviced by its deadline; \nservice after the deadline has expired is the same as no service at \nall. Any missed deadline to be a system failure. \n\uf06eAn Inkjet printer has a print head with control software for depositing the \ncorrect amount of ink onto a specific part of the paper. If a deadline is missed \nthen the print job is ruined.\n\uf06eAir France Flight 447 crashed into the ocean after a sensor malfunction \ncaused a series of system errors.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nReal-Time CPU Scheduling \n\uf070Soft real-time system allows for frequently missed deadlines, and \nas long as tasks are timely executed their results continue to have \nvalue. Completed tasks may have increasing value up to the \ndeadline and decreasing value past it.\n\uf06eWeather stations have many sensors for reading temperature, humidity, wind \nspeed, etc. The readings should be taken and transmitted at regular intervals, \nhowever the sensors are not synchronized. Even though a sensor reading may \nbe early or late compared with the others it can still be relevant as long as it \nis close enough.\n\uf06eThe sound system in computer. If you miss a few bits, no big deal, but miss \ntoo many and you're going to eventually degrade the system.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070A real-time system is typically waiting for an event in real time to \noccur. Events may arise either in software (as when a timer \nexpires)or in hardware (when a remote-controlled vehicle detects \nthat it is approaching an obstruction). \n\uf070When an event occurs, the system must respond to and service it \nas quickly as possible.\n\uf070Event latency is the amount of time that elapses from when an \nevent occurs to when it is serviced.\n\uf070Different events have different latency requirements in a system.\n\uf06eFor an antilock brake system – 3 to 5 milliseconds.\n\uf06eIf antilock brake system does not respond within, car accident might occurs  \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070Two types of latencies affect the performance of real-time systems\n1. Interrupt latency –.\n\uf06eWhen an interrupt occurs, \n\uf070the OS complete the instruction it is executing and \n\uf070determine the type of interrupt that occurred. \n\uf070save the state of the current process before servicing the interrupt using the specific interrupt \nservice routine (ISR).\n\uf06eA Interrupt latency is the period of time from the arrival of an interrupt at the \nCPU to the start of the routine that services the interrupt\n2. Dispatch latency – The amount of time required for the scheduling \ndispatcher to stop one process and start another\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nReal-Time CPU Scheduling  \n(Minimizing Latency)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n: from current process to interrupt service routine\n"), Document(metadata={'source': '/tmp/tmpqt8ils07', 'file_path': '/tmp/tmpqt8ils07', 'page': 1, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n2\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070Two types of latencies affect the performance of real-time systems\n1. Interrupt latency –\n2. Dispatch latency –\n\uf06eDispatch latency is the amount of time required for the scheduling dispatcher \nto stop one process and start another\n\uf06eThe most effective technique for keeping dispatch latency low is to provide \npreemptive kernels. For hard real-time systems, dispatch latency is typically \nmeasured in several microseconds.\n\uf06eTwo components of conflict phase of dispatch latency:\n\uf070Preemption of any process running in the kernel\n\uf070Release by low-priority processes of resources needed by a high-priority process\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nReal-Time CPU Scheduling  \n(Minimizing Latency)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nFig. Dispatch Latency\nReal-Time CPU Scheduling  \n(Preemptive Priority-Based Scheduling)\n\uf070The most important feature of a real-time operating system is to \nrespond immediately to a real-time process.\n\uf070In Priority-Based scheduling, scheduler always select highest \npriority process; more important tasks are assigned higher \npriorities than those deemed less important.\n\uf070With Preemptive, process currently running on the CPU will be \npreempted if a higher-priority process becomes available to run.\n\uf070Preemptive, priority-based scheduler only guarantees soft real-time \nfunctionality\n\uf070Since hard real-time system need consider deadline, the scheduler \nrequires additional scheduling features.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nReal-Time CPU Scheduling  \n\uf070Characteristics for a process require to consider for real-time CPU \nscheduler.\n\uf06ePeriod (p)- That is, process require the CPU at constant intervals (periods).\n\uf06eDeadline (d)\n\uf06eProcessing time (t)–fixed processing time\n\uf070The relationship of the processing time, the deadline, and the \nperiod can be expressed as \n\uf06e0 ≤ t ≤ d ≤ p. \n\uf070The rate of a periodic task is 1∕p.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nReal-Time CPU Scheduling \n\uf070A process have to provide its deadline requirement to the scheduler. Then, the \nscheduler either admit the process guaranteeing that the process will complete \non time, or rejects the request as impossible (admission-control algorithm)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nFig. Periodic task.\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Rate-monotonic scheduling assumes that the processing time of a \nperiodic process is the same for each CPU burst. That is, every \ntime a process acquires the CPU, the duration of its CPU burst is \nthe same. \n\uf070Upon entering the system, priority is assigned to a process based \non length of period (p). The shorter the period, the higher the \npriority.\n\uf070The rate-monotonic scheduling algorithm schedules periodic tasks \nusing a static priority policy with preemption.\n\uf070If a lower-priority process is running and a higher-priority process \nbecomes available to run, it will preempt the lower-priority \nprocess.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmpqt8ils07', 'file_path': '/tmp/tmpqt8ils07', 'page': 2, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n3\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=20, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=20/50 = 0.4\n\uf06ep2=100, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P1= p2/t2=35/100 = 0.35\n\uf06eSince t1 \uf03ct2, P1 has higher priority than P2\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\nP2\nP1\nP1\nP2\nP2\nP1\nP1\nP2\np2\np1\np1\np1\np2\nP1 ,P2 deadline =200\nP1 deadline =150\nP1 deadline =50\nP1 ,P2 deadline =100\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=25, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=25/50 = 0.5\n\uf06ep2=80, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P2 = p2/t2=35/80 = 0.4375\n\uf06eSince t1 \uf03ct2, P1 has higher priority than P2\n\uf06erate-monotonic scheduling cannot guarantee that they can be scheduled so that they \nmeet their deadlines.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\nP2\nP1\nP1\nP2\np2\np1\nP1 deadline =50\np2\np2\np1\np1\np1\nP2 deadline =80\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070Earliest-deadline-firs (EDF) scheduling assigns priorities \ndynamically according to deadline. \n\uf06eThe earlier the deadline, the higher the priority; \n\uf06eThe later the deadline, the lower the priority\n\uf070When a process becomes runnable (ready state), it must \nannounce its deadline requirements to the system. \n\uf070Priorities have to be adjusted to reflect the deadline of \nthe newly runnable process.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nP2\nP1\nP2\nP1\nP2\nP1\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=25, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=25/50 = 0.5\n\uf06ep2=80, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P2 = p2/t2=35/80 = 0.4375\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\np1\nP2\np2\np2\np1\np1\np1\np2\nP1\nP1\nP2\nP1\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070EDF scheduling is theoretically optimal—theoretically, it \ncan schedule processes so that each process can meet its \ndeadline requirements and CPU utilization will be 100 \npercent. \n\uf070In practice, it is not possible to achieve this level of CPU \nutilization due to the cost of context switching between \nprocesses and interrupt handling.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nReal-Time CPU Scheduling  \n(Proportional Share Scheduling)\n\uf070Proportional share schedulers operate by allocating T shares \namong all processes.\n\uf070An process can receive N shares of time, ensuring that the process \nwill have N∕T of the total processor time.\n\uf070Ex) There are three processes P1, P2, and P3. And, total of share T \n= 100.\n\uf06eP1 is assigned 50 shares, P2 is assigned 15 shares, and P3 is assigned 20 \nshares.\n\uf06eMeans that P1 will have 50 %, P2 will have 15 %, and P3 will have 20 % of \ntotal processor time.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n'), Document(metadata={'source': '/tmp/tmpqt8ils07', 'file_path': '/tmp/tmpqt8ils07', 'page': 3, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n4\nReal-Time CPU Scheduling  \n(Proportional Share Scheduling)\n\uf070Proportional share schedulers must work in conjunction \nwith an admission-control policy to guarantee that an \napplication receives its allocated shares of time.\n\uf070An admission-control policy will admit a process \nrequesting a particular number of shares only if sufficient \nshares are available.\n\uf06eIn previous example, we have allocated 50 + 15 + 20 = 85 \nshares of the total of 100 shares. \n\uf06eIf a new process P4 requested 30 shares, the admission \ncontroller would deny P4 entry into the system.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nScheduling Algorithm Evaluation\n\uf070Criteria for selecting an algorithm.\n\uf06eCPU Utilization\n\uf06eThroughput\n\uf06eResponse time\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\n')] for 450Slides9.pdf using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Document 1 (450Slides9.pdf) of 4
2024-12-18 07:19:07 - INFO - Starting clean_files_chain
2024-12-18 07:19:07 - INFO - Document: page_content='9/17/2024
1
Preview
Real-Time CPU Scheduling
Minimizing Latency
Preemptive Priority-Based Scheduling
Rate-Monotonic Scheduling
Earliest-Deadline-First Scheduling
Proportional Share Scheduling
Criteria for selecting an algorithm
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Real-Time CPU Scheduling 
CPU scheduling for real-time operating systems involves special 
issues. In general, we can distinguish between hard real-time 
systems and soft real-time systems.
Hard real-time systems - A task must be serviced by its deadline; 
service after the deadline has expired is the same as no service at 
all. Any missed deadline to be a system failure. 
An Inkjet printer has a print head with control software for depositing the 
correct amount of ink onto a specific part of the paper. If a deadline is missed 
then the print job is ruined.
Air France Flight 447 crashed into the ocean after a sensor malfunction 
caused a series of system errors.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Real-Time CPU Scheduling 
Soft real-time system allows for frequently missed deadlines, and 
as long as tasks are timely executed their results continue to have 
value. Completed tasks may have increasing value up to the 
deadline and decreasing value past it.
Weather stations have many sensors for reading temperature, humidity, wind 
speed, etc. The readings should be taken and transmitted at regular intervals, 
however the sensors are not synchronized. Even though a sensor reading may 
be early or late compared with the others it can still be relevant as long as it 
is close enough.
The sound system in computer. If you miss a few bits, no big deal, but miss 
too many and you're going to eventually degrade the system.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
Real-Time CPU Scheduling  
(Minimizing Latency)
A real-time system is typically waiting for an event in real time to 
occur. Events may arise either in software (as when a timer 
expires)or in hardware (when a remote-controlled vehicle detects 
that it is approaching an obstruction). 
When an event occurs, the system must respond to and service it 
as quickly as possible.
Event latency is the amount of time that elapses from when an 
event occurs to when it is serviced.
Different events have different latency requirements in a system.
For an antilock brake system – 3 to 5 milliseconds.
If antilock brake system does not respond within, car accident might occurs  
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
Real-Time CPU Scheduling  
(Minimizing Latency)
Two types of latencies affect the performance of real-time systems
1. Interrupt latency –.
When an interrupt occurs, 
the OS complete the instruction it is executing and 
determine the type of interrupt that occurred. 
save the state of the current process before servicing the interrupt using the specific interrupt 
service routine (ISR).
A Interrupt latency is the period of time from the arrival of an interrupt at the 
CPU to the start of the routine that services the interrupt
2. Dispatch latency – The amount of time required for the scheduling 
dispatcher to stop one process and start another
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
Real-Time CPU Scheduling  
(Minimizing Latency)
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
: from current process to interrupt service routine
' metadata={'source': '/tmp/tmpqt8ils07', 'file_path': '/tmp/tmpqt8ils07', 'page': 0, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}
2024-12-18 07:19:07 - INFO - Invoking chain
2024-12-18 07:19:07 - INFO - Successfully loaded 5 documents from: 450Slides11.pdf
2024-12-18 07:19:07 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n1\nReview\nInter-Process Communication\n\uf070Race Condition\n\uf070Critical Section (or region) \n\uf070Solutions for Mutual Exclusion in a Critical Section\n\uf06eWith Busy Waiting\n\uf070Disabling Interrupts –non-preemptive kernel\n\uf070Lock Variables –violating the first necessary condition (mutual exclusion )\n\uf070Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\uf070Peterson’s Solution\n\uf070Hardware Solution\n\uf0a7\nTest and Set Lock –\n\uf0a7\nMemory Barriers\n\uf0a7\nAtomic Variable\n\uf070Priority Inversion problems with busy waiting\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nPreview\n\uf070Mutual Exclusion in a Critical Section\n\uf06eWith Sleep and Wake up\n\uf070Producer Consumer Problem\n\uf070Race Condition Producer Consumer problem\n\uf070Semaphore\n\uf0a7\nConcept of Semaphore\n\uf0a7\nSemaphore Operation\n\uf0a7\nSemaphore Implementation\n\uf0a7\nProducer Consumer problem with semaphores\n\uf0a7\nCareless Usage of semaphore causes deadlock \n\uf070Dining Philosophers Problem\n\uf070Reader’s and Writer’s Problem\n\uf070Mutexes\n\uf070Monitor\n\uf0a7\nImplementation of Monitor\n\uf0a7\nProducer Consumer with Monitor\n\uf070Message Passing\n\uf0a7\nProducer Consumer with Message Passing\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nMutual Exclusion with Sleep and Wakeup\n\uf070Sleep and Wakeup-\n\uf06eA process check a resource (critical section), if not available go \nto sleep. \n\uf06eWhen the resource become available, the process will be waked \nup by system or the process release the resource.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nThe Producer-Consumer Problem\nDescription\n\uf070Two processes share a common, fixed-sized buffer. \n\uf070Producer puts information into the buffer, and consumer takes it \nout.\nTroubles arises \n\uf070When the producer wants to put a new item in the buffer, but it is \nalready full.\n\uf070When the consumer tries to take a item from the buffer, but buffer \nis already empty.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nThe Producer-Consumer Problem\n\uf070When the producer wants to put a new item in the buffer, \nbut it is already full.\n\uf06eSolution – producer is go to sleep, awakened by customer when \ncustomer has removed on or more items.\n\uf070When the consumer tries to take a item from the buffer, \nbut buffer is already empty.\n\uf06eSolution – customer is go to sleep, awakened by the producer \nwhen producer puts one or more information into the buffer.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nThe Producer-Consumer Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n#define N 100 //buffer size\nint count = 0;//# of item\nvoid producer()\n{\nint item\nwhile (true)\n{\nitem = produce_item();\nif (count == N)\nsleep();\ninsert_item(item)\ncount = count + 1;\nif (count ==1)\nwakeup(consumer);\n}\n}\nvoid consumer()\n{\nint item;\nwhile(true)\n{\nif (count == 0)\nsleep();\nitem = remove_item();\ncount = count – 1;\nif (count == N – 1)\nwakeup(producer);\nconsume_item(item);\n}\n}\n'), Document(metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n2\nSemaphores – by E. W. Dijkstra \n\uf070A semaphore is an integer variable which could have \nvalue \n\uf06e0:  no wakeups are saved\n\uf06e+ i: i wakeups are pending\n\uf070A semaphore is accessed only through two standard \natomic operations down (or P) and up (or V).\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nConcept of Semaphores\n\uf070Modification to the integer value of the semaphore in the \ndown and up operations are executed indivisibly. \n\uf070Which means that when a process is modifying the \nsemaphore value, no other process can simultaneously \nmodify that same semaphore value.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nSemaphore Operation\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nvoid down (S)\n{\nif S == 0\n{\n1. Add this process to the sleeping list\n2. block;\n}\nS = S – 1;\n}\nvoid up (S)\n{\nS = S + 1;\nIf S = 1\n{\n1. choose one process P from the \nsleeping list or let them move to \nready state\n2. wakeup(P) to finish down operation\n}\n}\nSemaphore Implementation\nThe normal way for implementing a semaphore\n\uf070Implement semaphore operations up and down as \nsystem call.\n\uf070operating system briefly disabling all interrupts while it is \ntesting the semaphore, updating it and putting the \nprocess to sleep.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nSolving the Producer-Consumer Problem using \nSemaphores\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1;  //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item(); //produce item\ndown (&empty); //check empty space\ndown (&mutex); //check mutual exclusion\ninsert_item(item); //insert item\nup(&mutex); //out from critical section\nup(&full); //increase # of item\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full); //check item in buffer\ndown(&mutex) //check mutual exclusion\nitem = remove_item(); //remove a item\nup(&mutex); //out from critical section\nup(&empty); //increase the empty space\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&mutex);\ndown (&empty);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full)\ndown(&mutex)\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content="9/26/2024\n3\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&empty);\ndown (&mutex);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&mutex);\ndown(&full);\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\nDining Philosophers Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\nDining Philosophers Problem\n\uf070Five silent philosophers sit at a round table with bowls of spaghetti. Chopsticks \nare placed between each pair of adjacent philosophers.\n\uf070Each philosopher must alternately think and eat. However, a philosopher can \nonly eat spaghetti when they have both left and right chopsticks. \n\uf070Each chopstick can be held by only one philosopher and so a philosopher can use \nthe chopstick only if it is not being used by another philosopher. \n\uf070After an individual philosopher finishes eating, they need to put down both \nchopsticks so that the chopstick s become available to others. A philosopher can \ntake the chopstick on their right or the one on their left as they become \navailable, but cannot start eating before getting both chopsticks.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nReaders-Writers Problem\n\uf070Process reader R and writers W are sharing resources at one time. \nOnly one process (reader or writer) can access the shared \nresources at any time.\n1. It is possible that a reader R1 might have the lock to a shared resource, and \nthen another reader R2 requests access. It would be foolish for R2 to wait \nuntil R1 was done before starting its own read operation; instead R1 and R2\ncan read same resource at the same time since both are reading.\n2. It is possible that a reader R1 might have the lock, a writer W be waiting for \nthe lock, and then a reader R2 requests access. It would be unfair for R2 to \njump in immediately, ahead of W; if that happened often \nenough, W would starve.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\nReaders-Writers Problem\nW2\nR3\nW1\nR2\nR1\nW2\nW1\nR1\nR2\nR3\nR4\nR3\nR2\nW1\nR1\nW1\nR1\nR4\nR2\nR3\nUnfair for W1 (starvation)\nMight be better\nShared resource(database)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nMutexes\n\uf070When the semaphore's ability to count is not needed, the simplified \nversion of the semaphore, called mutex is used.\n\uf070It is good for managing a mutual exclusion to some shared \nresources or pieces of code\n\uf070It is useful in thread packages that are implemented in user’s \nspace.\n\uf070A mutex is a variable that can be in one of two state: unlocked (0), \nlocked(1).\n\uf070A mutex concept is same as binary semaphore which has value 0 \nor 1.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n"), Document(metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n4\nMutexes\nmutexes mutex = 0\nrepeat\nmutex_lock (mutex);\nmutex_unlock (mutex);\nuntil false\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nCritical Section\nRemainder Section\nMonitor\n\uf070\nMonitor – High level synchronizing primitive \n\uf06e\nA collection of procedures, variables, and data structures that are all grouped \ntogether in a special kind of module.\n\uf06e\nOnly one process can be active in a monitor at any instant.\n\uf06e\nCompiler knows that monitors are special and can handle calls to monitor \nprocedure differently from other procedure call (create special code for \nmonitor).\n\uf06e\nWhen a process call a procedure inside a monitor, \n1.\ncheck whether any process is active within monitor or not. \n2.\nIf so, the calling process will be suspended until the other process has left the \nmonitor.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\nImplementation of Monitor\n\uf070Since monitor is a construct for a programming \nlanguage, Monitor implementation is based on the \ncompiler\n\uf070Compiler knows monitor is special kind of module, \ncompiler use mutex or binary semaphore for mutual \nexclusion.\n\uf070Monitor provide an easy way to achieve mutual exclusion. \nBut we need to consider, how a process can be blocked \nand how blocked process can be waked up?\n\uf06eIntroduction of Condition variables\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n21\nImplementation of Monitor\n\uf070Conditional variables are used in the monitor. \n\uf070There are two operation on the conditional variables (wait, signal).\n\uf070When a monitor procedure discovers that it cannot continue, it does wait \non some condition variable (ex full). This action causes the calling \nprocess to block. – allows other process get into the monitor.\n\uf070Other process (ex. consumer) can wake up its sleeping partner by doing \na signal on the condition variable that its partner is waiting on.\n\uf070If there are more than one processes are waiting on a condition variable, \nsystem scheduler choose one of them \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n22\nImplementation of Monitor\nOnce a process do a signal, what is next step for the process do a \nsignal, to avoid having two active processes in the monitor at the \nsame time?\nSolution 1) by Hoare\n\uf06eLetting the newly awakened process run, suspending the one do the signal\nSolution 2) by Brinch Hansen\n\uf06eA signal statement may appear only as the final statement in a monitor \nprocedure.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n23\nProducer-Consumer with Monitor\nmonitor ProducerConsumer\ncondition full, empty;\ninteger count;\nprocedure insert (item: integer);\nbegin\nif count = N then\nwait (full);\ninsert_item(item);\ncount :=count + 1;\nif count = 1 then\nsignal (empty)\nend;\nfunction remove: integer;\nbegin\nif count = 0 then\nwait (empty);\nremove = remove_item;\ncount := count – 1;\nif count = N – 1 then\nsignal (full);\nend;\ncount := 0;\nend monitor\nprocedure producer\nbegin\nwhile true do\nbegin\nitem = produce_item;\nProducerConsumer.insert(item)\nend\nend;\nprocedure consumer;\nbegin\nwhile true do\nbegin\nitem = ProducerConsumer.remove;\nconsume_item(item)\nend\nend;\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n24\n'), Document(metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n5\nMessage Passing\n\uf070Message Passing is a method of interprocess communication by using two \nprimitive system calls\n\uf06esend(destination, &message);\n\uf06ereceive(source, &message);\n\uf070Usually Message Passing is used between processes located in different system \nsince it is slower than using semaphore or monitor in the same system.\n\uf070If there is no message is available, the receiver will be blocked by system until \none arrived.\n\uf070If there is no message to send, the sender will be blocked by system until one \nbecome available.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n25\nMessage Passing\n(Design Issues for Message Passing System)\n\uf070Message can be lost\n\uf06eSolution: \n\uf070When a message is received, receiver send acknowledgement message.\n\uf070If sender has not received the ack. message within a certain time interval, retransmits the \nmessage.\n\uf06eThis solution cause new design issue. \n\uf070Receiver receive a message from sender, receiver send Ack. message. If the Ack. \nmessage lost, sender send same message again. Then receiver receive same \nmessage twice.\n\uf06eSolution:\n\uf070Each message is assigned with sequence number.\n\uf070Receiver site system can recognize duplicated message and discard one of them.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n26\nProducer-Consumer Problem \n(with Message Passing)\n#define N 100\n/* number of slots in the buffer */\nvoid producer ()\n{\nint item;\nmessage m;\n/* message buffer */\nwhile (ture)\n{\nitem = produce_item();\n/* generate item to put in buffer */\nreceive(consumer, &m);\n/* wait for an empty slot (ACK)*/\nbuild_message(&m, item);\n/* construct a message to send */\nsend(consumer, &m);\n/* send item to consumer */\n}\n}\nvoid consumer()\n{\nint item, i;\nmessage m;\nfor (i=0; i < N; i++)\n/* send N empty messages*/\nsend(producer, &m);\nwhile (true)\n{\nreceive(producer, &m);\n/* receive a message from producer */\nitem = extract_item(&m);\n/* extract a message */\nsend(producer, &m)\n/* send an empty message to producer (ACK)*/\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n27\n')] for 450Slides11.pdf using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Document 1 (450Slides11.pdf) of 5
2024-12-18 07:19:07 - INFO - Starting clean_files_chain
2024-12-18 07:19:07 - INFO - Document: page_content='9/26/2024
1
Review
Inter-Process Communication
Race Condition
Critical Section (or region) 
Solutions for Mutual Exclusion in a Critical Section
With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution

Test and Set Lock –

Memory Barriers

Atomic Variable
Priority Inversion problems with busy waiting
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Preview
Mutual Exclusion in a Critical Section
With Sleep and Wake up
Producer Consumer Problem
Race Condition Producer Consumer problem
Semaphore

Concept of Semaphore

Semaphore Operation

Semaphore Implementation

Producer Consumer problem with semaphores

Careless Usage of semaphore causes deadlock 
Dining Philosophers Problem
Reader’s and Writer’s Problem
Mutexes
Monitor

Implementation of Monitor

Producer Consumer with Monitor
Message Passing

Producer Consumer with Message Passing
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Mutual Exclusion with Sleep and Wakeup
Sleep and Wakeup-
A process check a resource (critical section), if not available go 
to sleep. 
When the resource become available, the process will be waked 
up by system or the process release the resource.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
The Producer-Consumer Problem
Description
Two processes share a common, fixed-sized buffer. 
Producer puts information into the buffer, and consumer takes it 
out.
Troubles arises 
When the producer wants to put a new item in the buffer, but it is 
already full.
When the consumer tries to take a item from the buffer, but buffer 
is already empty.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
The Producer-Consumer Problem
When the producer wants to put a new item in the buffer, 
but it is already full.
Solution – producer is go to sleep, awakened by customer when 
customer has removed on or more items.
When the consumer tries to take a item from the buffer, 
but buffer is already empty.
Solution – customer is go to sleep, awakened by the producer 
when producer puts one or more information into the buffer.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
The Producer-Consumer Problem
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
#define N 100 //buffer size
int count = 0;//# of item
void producer()
{
int item
while (true)
{
item = produce_item();
if (count == N)
sleep();
insert_item(item)
count = count + 1;
if (count ==1)
wakeup(consumer);
}
}
void consumer()
{
int item;
while(true)
{
if (count == 0)
sleep();
item = remove_item();
count = count – 1;
if (count == N – 1)
wakeup(producer);
consume_item(item);
}
}
' metadata={'source': '/tmp/tmpsfzj2s1a', 'file_path': '/tmp/tmpsfzj2s1a', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}
2024-12-18 07:19:07 - INFO - Invoking chain
2024-12-18 07:19:07 - INFO - Successfully loaded 5 documents from: cosc450_11.pdf
2024-12-18 07:19:07 - INFO - Docs: [Document(metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n1\nReview\nInter-Process Communication\n\uf070Race Condition\n\uf070Critical Section (or region) \n\uf070Solutions for Mutual Exclusion in a Critical Section\n\uf06eWith Busy Waiting\n\uf070Disabling Interrupts –non-preemptive kernel\n\uf070Lock Variables –violating the first necessary condition (mutual exclusion )\n\uf070Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\uf070Peterson’s Solution\n\uf070Hardware Solution\n\uf0a7\nTest and Set Lock –\n\uf0a7\nMemory Barriers\n\uf0a7\nAtomic Variable\n\uf070Priority Inversion problems with busy waiting\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nPreview\n\uf070Mutual Exclusion in a Critical Section\n\uf06eWith Sleep and Wake up\n\uf070Producer Consumer Problem\n\uf070Race Condition Producer Consumer problem\n\uf070Semaphore\n\uf0a7\nConcept of Semaphore\n\uf0a7\nSemaphore Operation\n\uf0a7\nSemaphore Implementation\n\uf0a7\nProducer Consumer problem with semaphores\n\uf0a7\nCareless Usage of semaphore causes deadlock \n\uf070Dining Philosophers Problem\n\uf070Reader’s and Writer’s Problem\n\uf070Mutexes\n\uf070Monitor\n\uf0a7\nImplementation of Monitor\n\uf0a7\nProducer Consumer with Monitor\n\uf070Message Passing\n\uf0a7\nProducer Consumer with Message Passing\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nMutual Exclusion with Sleep and Wakeup\n\uf070Sleep and Wakeup-\n\uf06eA process check a resource (critical section), if not available go \nto sleep. \n\uf06eWhen the resource become available, the process will be waked \nup by system or the process release the resource.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nThe Producer-Consumer Problem\nDescription\n\uf070Two processes share a common, fixed-sized buffer. \n\uf070Producer puts information into the buffer, and consumer takes it \nout.\nTroubles arises \n\uf070When the producer wants to put a new item in the buffer, but it is \nalready full.\n\uf070When the consumer tries to take a item from the buffer, but buffer \nis already empty.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nThe Producer-Consumer Problem\n\uf070When the producer wants to put a new item in the buffer, \nbut it is already full.\n\uf06eSolution – producer is go to sleep, awakened by customer when \ncustomer has removed on or more items.\n\uf070When the consumer tries to take a item from the buffer, \nbut buffer is already empty.\n\uf06eSolution – customer is go to sleep, awakened by the producer \nwhen producer puts one or more information into the buffer.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nThe Producer-Consumer Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n#define N 100 //buffer size\nint count = 0;//# of item\nvoid producer()\n{\nint item\nwhile (true)\n{\nitem = produce_item();\nif (count == N)\nsleep();\ninsert_item(item)\ncount = count + 1;\nif (count ==1)\nwakeup(consumer);\n}\n}\nvoid consumer()\n{\nint item;\nwhile(true)\n{\nif (count == 0)\nsleep();\nitem = remove_item();\ncount = count – 1;\nif (count == N – 1)\nwakeup(producer);\nconsume_item(item);\n}\n}\n'), Document(metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n2\nSemaphores – by E. W. Dijkstra \n\uf070A semaphore is an integer variable which could have \nvalue \n\uf06e0:  no wakeups are saved\n\uf06e+ i: i wakeups are pending\n\uf070A semaphore is accessed only through two standard \natomic operations down (or P) and up (or V).\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nConcept of Semaphores\n\uf070Modification to the integer value of the semaphore in the \ndown and up operations are executed indivisibly. \n\uf070Which means that when a process is modifying the \nsemaphore value, no other process can simultaneously \nmodify that same semaphore value.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nSemaphore Operation\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nvoid down (S)\n{\nif S == 0\n{\n1. Add this process to the sleeping list\n2. block;\n}\nS = S – 1;\n}\nvoid up (S)\n{\nS = S + 1;\nIf S = 1\n{\n1. choose one process P from the \nsleeping list or let them move to \nready state\n2. wakeup(P) to finish down operation\n}\n}\nSemaphore Implementation\nThe normal way for implementing a semaphore\n\uf070Implement semaphore operations up and down as \nsystem call.\n\uf070operating system briefly disabling all interrupts while it is \ntesting the semaphore, updating it and putting the \nprocess to sleep.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nSolving the Producer-Consumer Problem using \nSemaphores\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1;  //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item(); //produce item\ndown (&empty); //check empty space\ndown (&mutex); //check mutual exclusion\ninsert_item(item); //insert item\nup(&mutex); //out from critical section\nup(&full); //increase # of item\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full); //check item in buffer\ndown(&mutex) //check mutual exclusion\nitem = remove_item(); //remove a item\nup(&mutex); //out from critical section\nup(&empty); //increase the empty space\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&mutex);\ndown (&empty);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full)\ndown(&mutex)\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content="9/26/2024\n3\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&empty);\ndown (&mutex);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&mutex);\ndown(&full);\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\nDining Philosophers Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\nDining Philosophers Problem\n\uf070Five silent philosophers sit at a round table with bowls of spaghetti. Chopsticks \nare placed between each pair of adjacent philosophers.\n\uf070Each philosopher must alternately think and eat. However, a philosopher can \nonly eat spaghetti when they have both left and right chopsticks. \n\uf070Each chopstick can be held by only one philosopher and so a philosopher can use \nthe chopstick only if it is not being used by another philosopher. \n\uf070After an individual philosopher finishes eating, they need to put down both \nchopsticks so that the chopstick s become available to others. A philosopher can \ntake the chopstick on their right or the one on their left as they become \navailable, but cannot start eating before getting both chopsticks.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nReaders-Writers Problem\n\uf070Process reader R and writers W are sharing resources at one time. \nOnly one process (reader or writer) can access the shared \nresources at any time.\n1. It is possible that a reader R1 might have the lock to a shared resource, and \nthen another reader R2 requests access. It would be foolish for R2 to wait \nuntil R1 was done before starting its own read operation; instead R1 and R2\ncan read same resource at the same time since both are reading.\n2. It is possible that a reader R1 might have the lock, a writer W be waiting for \nthe lock, and then a reader R2 requests access. It would be unfair for R2 to \njump in immediately, ahead of W; if that happened often \nenough, W would starve.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\nReaders-Writers Problem\nW2\nR3\nW1\nR2\nR1\nW2\nW1\nR1\nR2\nR3\nR4\nR3\nR2\nW1\nR1\nW1\nR1\nR4\nR2\nR3\nUnfair for W1 (starvation)\nMight be better\nShared resource(database)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nMutexes\n\uf070When the semaphore's ability to count is not needed, the simplified \nversion of the semaphore, called mutex is used.\n\uf070It is good for managing a mutual exclusion to some shared \nresources or pieces of code\n\uf070It is useful in thread packages that are implemented in user’s \nspace.\n\uf070A mutex is a variable that can be in one of two state: unlocked (0), \nlocked(1).\n\uf070A mutex concept is same as binary semaphore which has value 0 \nor 1.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n"), Document(metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n4\nMutexes\nmutexes mutex = 0\nrepeat\nmutex_lock (mutex);\nmutex_unlock (mutex);\nuntil false\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nCritical Section\nRemainder Section\nMonitor\n\uf070\nMonitor – High level synchronizing primitive \n\uf06e\nA collection of procedures, variables, and data structures that are all grouped \ntogether in a special kind of module.\n\uf06e\nOnly one process can be active in a monitor at any instant.\n\uf06e\nCompiler knows that monitors are special and can handle calls to monitor \nprocedure differently from other procedure call (create special code for \nmonitor).\n\uf06e\nWhen a process call a procedure inside a monitor, \n1.\ncheck whether any process is active within monitor or not. \n2.\nIf so, the calling process will be suspended until the other process has left the \nmonitor.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\nImplementation of Monitor\n\uf070Since monitor is a construct for a programming \nlanguage, Monitor implementation is based on the \ncompiler\n\uf070Compiler knows monitor is special kind of module, \ncompiler use mutex or binary semaphore for mutual \nexclusion.\n\uf070Monitor provide an easy way to achieve mutual exclusion. \nBut we need to consider, how a process can be blocked \nand how blocked process can be waked up?\n\uf06eIntroduction of Condition variables\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n21\nImplementation of Monitor\n\uf070Conditional variables are used in the monitor. \n\uf070There are two operation on the conditional variables (wait, signal).\n\uf070When a monitor procedure discovers that it cannot continue, it does wait \non some condition variable (ex full). This action causes the calling \nprocess to block. – allows other process get into the monitor.\n\uf070Other process (ex. consumer) can wake up its sleeping partner by doing \na signal on the condition variable that its partner is waiting on.\n\uf070If there are more than one processes are waiting on a condition variable, \nsystem scheduler choose one of them \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n22\nImplementation of Monitor\nOnce a process do a signal, what is next step for the process do a \nsignal, to avoid having two active processes in the monitor at the \nsame time?\nSolution 1) by Hoare\n\uf06eLetting the newly awakened process run, suspending the one do the signal\nSolution 2) by Brinch Hansen\n\uf06eA signal statement may appear only as the final statement in a monitor \nprocedure.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n23\nProducer-Consumer with Monitor\nmonitor ProducerConsumer\ncondition full, empty;\ninteger count;\nprocedure insert (item: integer);\nbegin\nif count = N then\nwait (full);\ninsert_item(item);\ncount :=count + 1;\nif count = 1 then\nsignal (empty)\nend;\nfunction remove: integer;\nbegin\nif count = 0 then\nwait (empty);\nremove = remove_item;\ncount := count – 1;\nif count = N – 1 then\nsignal (full);\nend;\ncount := 0;\nend monitor\nprocedure producer\nbegin\nwhile true do\nbegin\nitem = produce_item;\nProducerConsumer.insert(item)\nend\nend;\nprocedure consumer;\nbegin\nwhile true do\nbegin\nitem = ProducerConsumer.remove;\nconsume_item(item)\nend\nend;\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n24\n'), Document(metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n5\nMessage Passing\n\uf070Message Passing is a method of interprocess communication by using two \nprimitive system calls\n\uf06esend(destination, &message);\n\uf06ereceive(source, &message);\n\uf070Usually Message Passing is used between processes located in different system \nsince it is slower than using semaphore or monitor in the same system.\n\uf070If there is no message is available, the receiver will be blocked by system until \none arrived.\n\uf070If there is no message to send, the sender will be blocked by system until one \nbecome available.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n25\nMessage Passing\n(Design Issues for Message Passing System)\n\uf070Message can be lost\n\uf06eSolution: \n\uf070When a message is received, receiver send acknowledgement message.\n\uf070If sender has not received the ack. message within a certain time interval, retransmits the \nmessage.\n\uf06eThis solution cause new design issue. \n\uf070Receiver receive a message from sender, receiver send Ack. message. If the Ack. \nmessage lost, sender send same message again. Then receiver receive same \nmessage twice.\n\uf06eSolution:\n\uf070Each message is assigned with sequence number.\n\uf070Receiver site system can recognize duplicated message and discard one of them.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n26\nProducer-Consumer Problem \n(with Message Passing)\n#define N 100\n/* number of slots in the buffer */\nvoid producer ()\n{\nint item;\nmessage m;\n/* message buffer */\nwhile (ture)\n{\nitem = produce_item();\n/* generate item to put in buffer */\nreceive(consumer, &m);\n/* wait for an empty slot (ACK)*/\nbuild_message(&m, item);\n/* construct a message to send */\nsend(consumer, &m);\n/* send item to consumer */\n}\n}\nvoid consumer()\n{\nint item, i;\nmessage m;\nfor (i=0; i < N; i++)\n/* send N empty messages*/\nsend(producer, &m);\nwhile (true)\n{\nreceive(producer, &m);\n/* receive a message from producer */\nitem = extract_item(&m);\n/* extract a message */\nsend(producer, &m)\n/* send an empty message to producer (ACK)*/\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n27\n')] for cosc450_11.pdf using PyMuPDFLoader
2024-12-18 07:19:07 - INFO - Document 1 (cosc450_11.pdf) of 5
2024-12-18 07:19:07 - INFO - Starting clean_files_chain
2024-12-18 07:19:07 - INFO - Document: page_content='9/26/2024
1
Review
Inter-Process Communication
Race Condition
Critical Section (or region) 
Solutions for Mutual Exclusion in a Critical Section
With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution

Test and Set Lock –

Memory Barriers

Atomic Variable
Priority Inversion problems with busy waiting
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Preview
Mutual Exclusion in a Critical Section
With Sleep and Wake up
Producer Consumer Problem
Race Condition Producer Consumer problem
Semaphore

Concept of Semaphore

Semaphore Operation

Semaphore Implementation

Producer Consumer problem with semaphores

Careless Usage of semaphore causes deadlock 
Dining Philosophers Problem
Reader’s and Writer’s Problem
Mutexes
Monitor

Implementation of Monitor

Producer Consumer with Monitor
Message Passing

Producer Consumer with Message Passing
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Mutual Exclusion with Sleep and Wakeup
Sleep and Wakeup-
A process check a resource (critical section), if not available go 
to sleep. 
When the resource become available, the process will be waked 
up by system or the process release the resource.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
The Producer-Consumer Problem
Description
Two processes share a common, fixed-sized buffer. 
Producer puts information into the buffer, and consumer takes it 
out.
Troubles arises 
When the producer wants to put a new item in the buffer, but it is 
already full.
When the consumer tries to take a item from the buffer, but buffer 
is already empty.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
The Producer-Consumer Problem
When the producer wants to put a new item in the buffer, 
but it is already full.
Solution – producer is go to sleep, awakened by customer when 
customer has removed on or more items.
When the consumer tries to take a item from the buffer, 
but buffer is already empty.
Solution – customer is go to sleep, awakened by the producer 
when producer puts one or more information into the buffer.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
The Producer-Consumer Problem
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
#define N 100 //buffer size
int count = 0;//# of item
void producer()
{
int item
while (true)
{
item = produce_item();
if (count == N)
sleep();
insert_item(item)
count = count + 1;
if (count ==1)
wakeup(consumer);
}
}
void consumer()
{
int item;
while(true)
{
if (count == 0)
sleep();
item = remove_item();
count = count – 1;
if (count == N – 1)
wakeup(producer);
consume_item(item);
}
}
' metadata={'source': '/tmp/tmptg5e5y8b', 'file_path': '/tmp/tmptg5e5y8b', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}
2024-12-18 07:19:07 - INFO - Invoking chain
2024-12-18 07:19:08 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:08 - ERROR - Error processing tasks: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-**************************************************************************************************************************************************************SVAA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}
2024-12-18 07:19:08 - INFO - Cleaning up temp files
2024-12-18 07:19:08 - INFO - Deleted temp file: /tmp/tmptg5e5y8b
2024-12-18 07:19:08 - INFO - Deleted temp file: /tmp/tmpjxp9jj_u
2024-12-18 07:19:08 - INFO - Deleted temp file: /tmp/tmpqt8ils07
2024-12-18 07:19:08 - INFO - Deleted temp file: /tmp/tmpsfzj2s1a
2024-12-18 07:19:08 - INFO - Temp files cleaned
2024-12-18 07:19:08 - INFO - Run function completed
2024-12-18 07:19:08 - INFO - Test generated successfully
2024-12-18 07:19:08 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:08 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:08 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:47 - INFO - POST request received for /generate
2024-12-18 07:19:47 - INFO - Form data: title='Operating Systems Test 1' course='Operating Systems' professor='Dr. Park' number_of_written_questions=1 number_of_mcq_questions=2 number_of_TF_questions=2 level='Normal' school_type='Undergraduate' difficulty='Extreme' testing_philosophy='Fail them all' url_1=None url_2=None subject_material=[UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'})), UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))]
2024-12-18 07:19:47 - INFO - Starting run function
2024-12-18 07:19:47 - INFO - Form data accessed
2024-12-18 07:19:47 - INFO - Form Title: Operating Systems Test 1
2024-12-18 07:19:47 - INFO - Form Course: Operating Systems
2024-12-18 07:19:47 - INFO - Form Professor: Dr. Park
2024-12-18 07:19:47 - INFO - Form Number of MCQ Questions: 2
2024-12-18 07:19:47 - INFO - Form Number of TF Questions: 2
2024-12-18 07:19:47 - INFO - Form Number of Written Questions: 1
2024-12-18 07:19:47 - INFO - Form School Type: Undergraduate
2024-12-18 07:19:47 - INFO - Form Difficulty: Extreme
2024-12-18 07:19:47 - INFO - Form Testing Philosophy: Fail them all
2024-12-18 07:19:47 - INFO - Moving to files...
2024-12-18 07:19:47 - INFO - Starting to process files
2024-12-18 07:19:47 - INFO - Processing file: 450Slides9.pdf
2024-12-18 07:19:47 - INFO - Getting loader for file: UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - File extension: .pdf
2024-12-18 07:19:47 - INFO - Processing PDF file: 450Slides9.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides9.pdf', size=233626, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides9.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - Processing file: 450Slides11.pdf
2024-12-18 07:19:47 - INFO - Getting loader for file: UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - File extension: .pdf
2024-12-18 07:19:47 - INFO - Processing PDF file: 450Slides11.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - Processing file: cosc450_11.pdf
2024-12-18 07:19:47 - INFO - Getting loader for file: UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - File extension: .pdf
2024-12-18 07:19:47 - INFO - Processing PDF file: cosc450_11.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='cosc450_11.pdf', size=343833, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="cosc450_11.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - Processing file: 450Slides10.pdf
2024-12-18 07:19:47 - INFO - Getting loader for file: UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - File extension: .pdf
2024-12-18 07:19:47 - INFO - Processing PDF file: 450Slides10.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for UploadFile(filename='450Slides10.pdf', size=166799, headers=Headers({'content-disposition': 'form-data; name="subject_material"; filename="450Slides10.pdf"', 'content-type': 'application/pdf'}))
2024-12-18 07:19:47 - INFO - URLs: []
2024-12-18 07:19:47 - INFO - Processing 4 files and 0 URLs
2024-12-18 07:19:47 - INFO - Processing 450Slides9.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for 450Slides9.pdf
2024-12-18 07:19:47 - INFO - Processing 450Slides9.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Processing 450Slides11.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for 450Slides11.pdf
2024-12-18 07:19:47 - INFO - Processing 450Slides11.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Processing cosc450_11.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for cosc450_11.pdf
2024-12-18 07:19:47 - INFO - Processing cosc450_11.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Processing 450Slides10.pdf
2024-12-18 07:19:47 - INFO - Using loader type: PyMuPDFLoader for 450Slides10.pdf
2024-12-18 07:19:47 - INFO - Processing 450Slides10.pdf as a regular document using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Successfully loaded 4 documents from: 450Slides9.pdf
2024-12-18 07:19:47 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpfrlfb1w6', 'file_path': '/tmp/tmpfrlfb1w6', 'page': 0, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content="9/17/2024\n1\nPreview\n\uf070Real-Time CPU Scheduling\n\uf06eMinimizing Latency\n\uf06ePreemptive Priority-Based Scheduling\n\uf06eRate-Monotonic Scheduling\n\uf06eEarliest-Deadline-First Scheduling\n\uf06eProportional Share Scheduling\n\uf070Criteria for selecting an algorithm\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nReal-Time CPU Scheduling \n\uf070CPU scheduling for real-time operating systems involves special \nissues. In general, we can distinguish between hard real-time \nsystems and soft real-time systems.\n\uf070Hard real-time systems - A task must be serviced by its deadline; \nservice after the deadline has expired is the same as no service at \nall. Any missed deadline to be a system failure. \n\uf06eAn Inkjet printer has a print head with control software for depositing the \ncorrect amount of ink onto a specific part of the paper. If a deadline is missed \nthen the print job is ruined.\n\uf06eAir France Flight 447 crashed into the ocean after a sensor malfunction \ncaused a series of system errors.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nReal-Time CPU Scheduling \n\uf070Soft real-time system allows for frequently missed deadlines, and \nas long as tasks are timely executed their results continue to have \nvalue. Completed tasks may have increasing value up to the \ndeadline and decreasing value past it.\n\uf06eWeather stations have many sensors for reading temperature, humidity, wind \nspeed, etc. The readings should be taken and transmitted at regular intervals, \nhowever the sensors are not synchronized. Even though a sensor reading may \nbe early or late compared with the others it can still be relevant as long as it \nis close enough.\n\uf06eThe sound system in computer. If you miss a few bits, no big deal, but miss \ntoo many and you're going to eventually degrade the system.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070A real-time system is typically waiting for an event in real time to \noccur. Events may arise either in software (as when a timer \nexpires)or in hardware (when a remote-controlled vehicle detects \nthat it is approaching an obstruction). \n\uf070When an event occurs, the system must respond to and service it \nas quickly as possible.\n\uf070Event latency is the amount of time that elapses from when an \nevent occurs to when it is serviced.\n\uf070Different events have different latency requirements in a system.\n\uf06eFor an antilock brake system – 3 to 5 milliseconds.\n\uf06eIf antilock brake system does not respond within, car accident might occurs  \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070Two types of latencies affect the performance of real-time systems\n1. Interrupt latency –.\n\uf06eWhen an interrupt occurs, \n\uf070the OS complete the instruction it is executing and \n\uf070determine the type of interrupt that occurred. \n\uf070save the state of the current process before servicing the interrupt using the specific interrupt \nservice routine (ISR).\n\uf06eA Interrupt latency is the period of time from the arrival of an interrupt at the \nCPU to the start of the routine that services the interrupt\n2. Dispatch latency – The amount of time required for the scheduling \ndispatcher to stop one process and start another\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nReal-Time CPU Scheduling  \n(Minimizing Latency)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n: from current process to interrupt service routine\n"), Document(metadata={'source': '/tmp/tmpfrlfb1w6', 'file_path': '/tmp/tmpfrlfb1w6', 'page': 1, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n2\nReal-Time CPU Scheduling  \n(Minimizing Latency)\n\uf070Two types of latencies affect the performance of real-time systems\n1. Interrupt latency –\n2. Dispatch latency –\n\uf06eDispatch latency is the amount of time required for the scheduling dispatcher \nto stop one process and start another\n\uf06eThe most effective technique for keeping dispatch latency low is to provide \npreemptive kernels. For hard real-time systems, dispatch latency is typically \nmeasured in several microseconds.\n\uf06eTwo components of conflict phase of dispatch latency:\n\uf070Preemption of any process running in the kernel\n\uf070Release by low-priority processes of resources needed by a high-priority process\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nReal-Time CPU Scheduling  \n(Minimizing Latency)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nFig. Dispatch Latency\nReal-Time CPU Scheduling  \n(Preemptive Priority-Based Scheduling)\n\uf070The most important feature of a real-time operating system is to \nrespond immediately to a real-time process.\n\uf070In Priority-Based scheduling, scheduler always select highest \npriority process; more important tasks are assigned higher \npriorities than those deemed less important.\n\uf070With Preemptive, process currently running on the CPU will be \npreempted if a higher-priority process becomes available to run.\n\uf070Preemptive, priority-based scheduler only guarantees soft real-time \nfunctionality\n\uf070Since hard real-time system need consider deadline, the scheduler \nrequires additional scheduling features.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nReal-Time CPU Scheduling  \n\uf070Characteristics for a process require to consider for real-time CPU \nscheduler.\n\uf06ePeriod (p)- That is, process require the CPU at constant intervals (periods).\n\uf06eDeadline (d)\n\uf06eProcessing time (t)–fixed processing time\n\uf070The relationship of the processing time, the deadline, and the \nperiod can be expressed as \n\uf06e0 ≤ t ≤ d ≤ p. \n\uf070The rate of a periodic task is 1∕p.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nReal-Time CPU Scheduling \n\uf070A process have to provide its deadline requirement to the scheduler. Then, the \nscheduler either admit the process guaranteeing that the process will complete \non time, or rejects the request as impossible (admission-control algorithm)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nFig. Periodic task.\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Rate-monotonic scheduling assumes that the processing time of a \nperiodic process is the same for each CPU burst. That is, every \ntime a process acquires the CPU, the duration of its CPU burst is \nthe same. \n\uf070Upon entering the system, priority is assigned to a process based \non length of period (p). The shorter the period, the higher the \npriority.\n\uf070The rate-monotonic scheduling algorithm schedules periodic tasks \nusing a static priority policy with preemption.\n\uf070If a lower-priority process is running and a higher-priority process \nbecomes available to run, it will preempt the lower-priority \nprocess.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmpfrlfb1w6', 'file_path': '/tmp/tmpfrlfb1w6', 'page': 2, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n3\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=20, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=20/50 = 0.4\n\uf06ep2=100, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P1= p2/t2=35/100 = 0.35\n\uf06eSince t1 \uf03ct2, P1 has higher priority than P2\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\nP2\nP1\nP1\nP2\nP2\nP1\nP1\nP2\np2\np1\np1\np1\np2\nP1 ,P2 deadline =200\nP1 deadline =150\nP1 deadline =50\nP1 ,P2 deadline =100\nReal-Time CPU Scheduling  \n(Rate-Monotonic Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=25, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=25/50 = 0.5\n\uf06ep2=80, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P2 = p2/t2=35/80 = 0.4375\n\uf06eSince t1 \uf03ct2, P1 has higher priority than P2\n\uf06erate-monotonic scheduling cannot guarantee that they can be scheduled so that they \nmeet their deadlines.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\nP2\nP1\nP1\nP2\np2\np1\nP1 deadline =50\np2\np2\np1\np1\np1\nP2 deadline =80\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070Earliest-deadline-firs (EDF) scheduling assigns priorities \ndynamically according to deadline. \n\uf06eThe earlier the deadline, the higher the priority; \n\uf06eThe later the deadline, the lower the priority\n\uf070When a process becomes runnable (ready state), it must \nannounce its deadline requirements to the system. \n\uf070Priorities have to be adjusted to reflect the deadline of \nthe newly runnable process.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nP2\nP1\nP2\nP1\nP2\nP1\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070Ex) Two process P1, P2\n\uf06ep1= 50, t1=25, d1= by the start of its next period\n\uf070CPU utilization of P1= p1/t1=25/50 = 0.5\n\uf06ep2=80, t2=35, d2 = by the start of its next period\n\uf070CPU utilization of P2 = p2/t2=35/80 = 0.4375\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\n110\n0\n120\n150\n160\n170\n180\n190\n200\n130\n140\n100\n30\n40\n50\n60\n70\n80\n90\n20\n10\np1\nP2\np2\np2\np1\np1\np1\np2\nP1\nP1\nP2\nP1\nReal-Time CPU Scheduling  \n(Earliest-Deadline-First Scheduling)\n\uf070EDF scheduling is theoretically optimal—theoretically, it \ncan schedule processes so that each process can meet its \ndeadline requirements and CPU utilization will be 100 \npercent. \n\uf070In practice, it is not possible to achieve this level of CPU \nutilization due to the cost of context switching between \nprocesses and interrupt handling.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nReal-Time CPU Scheduling  \n(Proportional Share Scheduling)\n\uf070Proportional share schedulers operate by allocating T shares \namong all processes.\n\uf070An process can receive N shares of time, ensuring that the process \nwill have N∕T of the total processor time.\n\uf070Ex) There are three processes P1, P2, and P3. And, total of share T \n= 100.\n\uf06eP1 is assigned 50 shares, P2 is assigned 15 shares, and P3 is assigned 20 \nshares.\n\uf06eMeans that P1 will have 50 %, P2 will have 15 %, and P3 will have 20 % of \ntotal processor time.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n'), Document(metadata={'source': '/tmp/tmpfrlfb1w6', 'file_path': '/tmp/tmpfrlfb1w6', 'page': 3, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}, page_content='9/17/2024\n4\nReal-Time CPU Scheduling  \n(Proportional Share Scheduling)\n\uf070Proportional share schedulers must work in conjunction \nwith an admission-control policy to guarantee that an \napplication receives its allocated shares of time.\n\uf070An admission-control policy will admit a process \nrequesting a particular number of shares only if sufficient \nshares are available.\n\uf06eIn previous example, we have allocated 50 + 15 + 20 = 85 \nshares of the total of 100 shares. \n\uf06eIf a new process P4 requested 30 shares, the admission \ncontroller would deny P4 entry into the system.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nScheduling Algorithm Evaluation\n\uf070Criteria for selecting an algorithm.\n\uf06eCPU Utilization\n\uf06eThroughput\n\uf06eResponse time\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\n')] for 450Slides9.pdf using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Document 1 (450Slides9.pdf) of 4
2024-12-18 07:19:47 - INFO - Starting clean_files_chain
2024-12-18 07:19:47 - INFO - Document: page_content='9/17/2024
1
Preview
Real-Time CPU Scheduling
Minimizing Latency
Preemptive Priority-Based Scheduling
Rate-Monotonic Scheduling
Earliest-Deadline-First Scheduling
Proportional Share Scheduling
Criteria for selecting an algorithm
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Real-Time CPU Scheduling 
CPU scheduling for real-time operating systems involves special 
issues. In general, we can distinguish between hard real-time 
systems and soft real-time systems.
Hard real-time systems - A task must be serviced by its deadline; 
service after the deadline has expired is the same as no service at 
all. Any missed deadline to be a system failure. 
An Inkjet printer has a print head with control software for depositing the 
correct amount of ink onto a specific part of the paper. If a deadline is missed 
then the print job is ruined.
Air France Flight 447 crashed into the ocean after a sensor malfunction 
caused a series of system errors.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Real-Time CPU Scheduling 
Soft real-time system allows for frequently missed deadlines, and 
as long as tasks are timely executed their results continue to have 
value. Completed tasks may have increasing value up to the 
deadline and decreasing value past it.
Weather stations have many sensors for reading temperature, humidity, wind 
speed, etc. The readings should be taken and transmitted at regular intervals, 
however the sensors are not synchronized. Even though a sensor reading may 
be early or late compared with the others it can still be relevant as long as it 
is close enough.
The sound system in computer. If you miss a few bits, no big deal, but miss 
too many and you're going to eventually degrade the system.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
Real-Time CPU Scheduling  
(Minimizing Latency)
A real-time system is typically waiting for an event in real time to 
occur. Events may arise either in software (as when a timer 
expires)or in hardware (when a remote-controlled vehicle detects 
that it is approaching an obstruction). 
When an event occurs, the system must respond to and service it 
as quickly as possible.
Event latency is the amount of time that elapses from when an 
event occurs to when it is serviced.
Different events have different latency requirements in a system.
For an antilock brake system – 3 to 5 milliseconds.
If antilock brake system does not respond within, car accident might occurs  
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
Real-Time CPU Scheduling  
(Minimizing Latency)
Two types of latencies affect the performance of real-time systems
1. Interrupt latency –.
When an interrupt occurs, 
the OS complete the instruction it is executing and 
determine the type of interrupt that occurred. 
save the state of the current process before servicing the interrupt using the specific interrupt 
service routine (ISR).
A Interrupt latency is the period of time from the arrival of an interrupt at the 
CPU to the start of the routine that services the interrupt
2. Dispatch latency – The amount of time required for the scheduling 
dispatcher to stop one process and start another
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
Real-Time CPU Scheduling  
(Minimizing Latency)
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
: from current process to interrupt service routine
' metadata={'source': '/tmp/tmpfrlfb1w6', 'file_path': '/tmp/tmpfrlfb1w6', 'page': 0, 'total_pages': 4, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240917075958-04'00'", 'modDate': "D:20240917075958-04'00'", 'trapped': ''}
2024-12-18 07:19:47 - INFO - Invoking chain
2024-12-18 07:19:47 - INFO - Successfully loaded 5 documents from: 450Slides11.pdf
2024-12-18 07:19:47 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n1\nReview\nInter-Process Communication\n\uf070Race Condition\n\uf070Critical Section (or region) \n\uf070Solutions for Mutual Exclusion in a Critical Section\n\uf06eWith Busy Waiting\n\uf070Disabling Interrupts –non-preemptive kernel\n\uf070Lock Variables –violating the first necessary condition (mutual exclusion )\n\uf070Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\uf070Peterson’s Solution\n\uf070Hardware Solution\n\uf0a7\nTest and Set Lock –\n\uf0a7\nMemory Barriers\n\uf0a7\nAtomic Variable\n\uf070Priority Inversion problems with busy waiting\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nPreview\n\uf070Mutual Exclusion in a Critical Section\n\uf06eWith Sleep and Wake up\n\uf070Producer Consumer Problem\n\uf070Race Condition Producer Consumer problem\n\uf070Semaphore\n\uf0a7\nConcept of Semaphore\n\uf0a7\nSemaphore Operation\n\uf0a7\nSemaphore Implementation\n\uf0a7\nProducer Consumer problem with semaphores\n\uf0a7\nCareless Usage of semaphore causes deadlock \n\uf070Dining Philosophers Problem\n\uf070Reader’s and Writer’s Problem\n\uf070Mutexes\n\uf070Monitor\n\uf0a7\nImplementation of Monitor\n\uf0a7\nProducer Consumer with Monitor\n\uf070Message Passing\n\uf0a7\nProducer Consumer with Message Passing\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nMutual Exclusion with Sleep and Wakeup\n\uf070Sleep and Wakeup-\n\uf06eA process check a resource (critical section), if not available go \nto sleep. \n\uf06eWhen the resource become available, the process will be waked \nup by system or the process release the resource.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nThe Producer-Consumer Problem\nDescription\n\uf070Two processes share a common, fixed-sized buffer. \n\uf070Producer puts information into the buffer, and consumer takes it \nout.\nTroubles arises \n\uf070When the producer wants to put a new item in the buffer, but it is \nalready full.\n\uf070When the consumer tries to take a item from the buffer, but buffer \nis already empty.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nThe Producer-Consumer Problem\n\uf070When the producer wants to put a new item in the buffer, \nbut it is already full.\n\uf06eSolution – producer is go to sleep, awakened by customer when \ncustomer has removed on or more items.\n\uf070When the consumer tries to take a item from the buffer, \nbut buffer is already empty.\n\uf06eSolution – customer is go to sleep, awakened by the producer \nwhen producer puts one or more information into the buffer.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nThe Producer-Consumer Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n#define N 100 //buffer size\nint count = 0;//# of item\nvoid producer()\n{\nint item\nwhile (true)\n{\nitem = produce_item();\nif (count == N)\nsleep();\ninsert_item(item)\ncount = count + 1;\nif (count ==1)\nwakeup(consumer);\n}\n}\nvoid consumer()\n{\nint item;\nwhile(true)\n{\nif (count == 0)\nsleep();\nitem = remove_item();\ncount = count – 1;\nif (count == N – 1)\nwakeup(producer);\nconsume_item(item);\n}\n}\n'), Document(metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n2\nSemaphores – by E. W. Dijkstra \n\uf070A semaphore is an integer variable which could have \nvalue \n\uf06e0:  no wakeups are saved\n\uf06e+ i: i wakeups are pending\n\uf070A semaphore is accessed only through two standard \natomic operations down (or P) and up (or V).\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nConcept of Semaphores\n\uf070Modification to the integer value of the semaphore in the \ndown and up operations are executed indivisibly. \n\uf070Which means that when a process is modifying the \nsemaphore value, no other process can simultaneously \nmodify that same semaphore value.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nSemaphore Operation\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nvoid down (S)\n{\nif S == 0\n{\n1. Add this process to the sleeping list\n2. block;\n}\nS = S – 1;\n}\nvoid up (S)\n{\nS = S + 1;\nIf S = 1\n{\n1. choose one process P from the \nsleeping list or let them move to \nready state\n2. wakeup(P) to finish down operation\n}\n}\nSemaphore Implementation\nThe normal way for implementing a semaphore\n\uf070Implement semaphore operations up and down as \nsystem call.\n\uf070operating system briefly disabling all interrupts while it is \ntesting the semaphore, updating it and putting the \nprocess to sleep.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nSolving the Producer-Consumer Problem using \nSemaphores\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1;  //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item(); //produce item\ndown (&empty); //check empty space\ndown (&mutex); //check mutual exclusion\ninsert_item(item); //insert item\nup(&mutex); //out from critical section\nup(&full); //increase # of item\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full); //check item in buffer\ndown(&mutex) //check mutual exclusion\nitem = remove_item(); //remove a item\nup(&mutex); //out from critical section\nup(&empty); //increase the empty space\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&mutex);\ndown (&empty);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full)\ndown(&mutex)\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content="9/26/2024\n3\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&empty);\ndown (&mutex);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&mutex);\ndown(&full);\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\nDining Philosophers Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\nDining Philosophers Problem\n\uf070Five silent philosophers sit at a round table with bowls of spaghetti. Chopsticks \nare placed between each pair of adjacent philosophers.\n\uf070Each philosopher must alternately think and eat. However, a philosopher can \nonly eat spaghetti when they have both left and right chopsticks. \n\uf070Each chopstick can be held by only one philosopher and so a philosopher can use \nthe chopstick only if it is not being used by another philosopher. \n\uf070After an individual philosopher finishes eating, they need to put down both \nchopsticks so that the chopstick s become available to others. A philosopher can \ntake the chopstick on their right or the one on their left as they become \navailable, but cannot start eating before getting both chopsticks.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nReaders-Writers Problem\n\uf070Process reader R and writers W are sharing resources at one time. \nOnly one process (reader or writer) can access the shared \nresources at any time.\n1. It is possible that a reader R1 might have the lock to a shared resource, and \nthen another reader R2 requests access. It would be foolish for R2 to wait \nuntil R1 was done before starting its own read operation; instead R1 and R2\ncan read same resource at the same time since both are reading.\n2. It is possible that a reader R1 might have the lock, a writer W be waiting for \nthe lock, and then a reader R2 requests access. It would be unfair for R2 to \njump in immediately, ahead of W; if that happened often \nenough, W would starve.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\nReaders-Writers Problem\nW2\nR3\nW1\nR2\nR1\nW2\nW1\nR1\nR2\nR3\nR4\nR3\nR2\nW1\nR1\nW1\nR1\nR4\nR2\nR3\nUnfair for W1 (starvation)\nMight be better\nShared resource(database)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nMutexes\n\uf070When the semaphore's ability to count is not needed, the simplified \nversion of the semaphore, called mutex is used.\n\uf070It is good for managing a mutual exclusion to some shared \nresources or pieces of code\n\uf070It is useful in thread packages that are implemented in user’s \nspace.\n\uf070A mutex is a variable that can be in one of two state: unlocked (0), \nlocked(1).\n\uf070A mutex concept is same as binary semaphore which has value 0 \nor 1.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n"), Document(metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n4\nMutexes\nmutexes mutex = 0\nrepeat\nmutex_lock (mutex);\nmutex_unlock (mutex);\nuntil false\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nCritical Section\nRemainder Section\nMonitor\n\uf070\nMonitor – High level synchronizing primitive \n\uf06e\nA collection of procedures, variables, and data structures that are all grouped \ntogether in a special kind of module.\n\uf06e\nOnly one process can be active in a monitor at any instant.\n\uf06e\nCompiler knows that monitors are special and can handle calls to monitor \nprocedure differently from other procedure call (create special code for \nmonitor).\n\uf06e\nWhen a process call a procedure inside a monitor, \n1.\ncheck whether any process is active within monitor or not. \n2.\nIf so, the calling process will be suspended until the other process has left the \nmonitor.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\nImplementation of Monitor\n\uf070Since monitor is a construct for a programming \nlanguage, Monitor implementation is based on the \ncompiler\n\uf070Compiler knows monitor is special kind of module, \ncompiler use mutex or binary semaphore for mutual \nexclusion.\n\uf070Monitor provide an easy way to achieve mutual exclusion. \nBut we need to consider, how a process can be blocked \nand how blocked process can be waked up?\n\uf06eIntroduction of Condition variables\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n21\nImplementation of Monitor\n\uf070Conditional variables are used in the monitor. \n\uf070There are two operation on the conditional variables (wait, signal).\n\uf070When a monitor procedure discovers that it cannot continue, it does wait \non some condition variable (ex full). This action causes the calling \nprocess to block. – allows other process get into the monitor.\n\uf070Other process (ex. consumer) can wake up its sleeping partner by doing \na signal on the condition variable that its partner is waiting on.\n\uf070If there are more than one processes are waiting on a condition variable, \nsystem scheduler choose one of them \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n22\nImplementation of Monitor\nOnce a process do a signal, what is next step for the process do a \nsignal, to avoid having two active processes in the monitor at the \nsame time?\nSolution 1) by Hoare\n\uf06eLetting the newly awakened process run, suspending the one do the signal\nSolution 2) by Brinch Hansen\n\uf06eA signal statement may appear only as the final statement in a monitor \nprocedure.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n23\nProducer-Consumer with Monitor\nmonitor ProducerConsumer\ncondition full, empty;\ninteger count;\nprocedure insert (item: integer);\nbegin\nif count = N then\nwait (full);\ninsert_item(item);\ncount :=count + 1;\nif count = 1 then\nsignal (empty)\nend;\nfunction remove: integer;\nbegin\nif count = 0 then\nwait (empty);\nremove = remove_item;\ncount := count – 1;\nif count = N – 1 then\nsignal (full);\nend;\ncount := 0;\nend monitor\nprocedure producer\nbegin\nwhile true do\nbegin\nitem = produce_item;\nProducerConsumer.insert(item)\nend\nend;\nprocedure consumer;\nbegin\nwhile true do\nbegin\nitem = ProducerConsumer.remove;\nconsume_item(item)\nend\nend;\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n24\n'), Document(metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n5\nMessage Passing\n\uf070Message Passing is a method of interprocess communication by using two \nprimitive system calls\n\uf06esend(destination, &message);\n\uf06ereceive(source, &message);\n\uf070Usually Message Passing is used between processes located in different system \nsince it is slower than using semaphore or monitor in the same system.\n\uf070If there is no message is available, the receiver will be blocked by system until \none arrived.\n\uf070If there is no message to send, the sender will be blocked by system until one \nbecome available.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n25\nMessage Passing\n(Design Issues for Message Passing System)\n\uf070Message can be lost\n\uf06eSolution: \n\uf070When a message is received, receiver send acknowledgement message.\n\uf070If sender has not received the ack. message within a certain time interval, retransmits the \nmessage.\n\uf06eThis solution cause new design issue. \n\uf070Receiver receive a message from sender, receiver send Ack. message. If the Ack. \nmessage lost, sender send same message again. Then receiver receive same \nmessage twice.\n\uf06eSolution:\n\uf070Each message is assigned with sequence number.\n\uf070Receiver site system can recognize duplicated message and discard one of them.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n26\nProducer-Consumer Problem \n(with Message Passing)\n#define N 100\n/* number of slots in the buffer */\nvoid producer ()\n{\nint item;\nmessage m;\n/* message buffer */\nwhile (ture)\n{\nitem = produce_item();\n/* generate item to put in buffer */\nreceive(consumer, &m);\n/* wait for an empty slot (ACK)*/\nbuild_message(&m, item);\n/* construct a message to send */\nsend(consumer, &m);\n/* send item to consumer */\n}\n}\nvoid consumer()\n{\nint item, i;\nmessage m;\nfor (i=0; i < N; i++)\n/* send N empty messages*/\nsend(producer, &m);\nwhile (true)\n{\nreceive(producer, &m);\n/* receive a message from producer */\nitem = extract_item(&m);\n/* extract a message */\nsend(producer, &m)\n/* send an empty message to producer (ACK)*/\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n27\n')] for 450Slides11.pdf using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Document 1 (450Slides11.pdf) of 5
2024-12-18 07:19:47 - INFO - Starting clean_files_chain
2024-12-18 07:19:47 - INFO - Document: page_content='9/26/2024
1
Review
Inter-Process Communication
Race Condition
Critical Section (or region) 
Solutions for Mutual Exclusion in a Critical Section
With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution

Test and Set Lock –

Memory Barriers

Atomic Variable
Priority Inversion problems with busy waiting
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Preview
Mutual Exclusion in a Critical Section
With Sleep and Wake up
Producer Consumer Problem
Race Condition Producer Consumer problem
Semaphore

Concept of Semaphore

Semaphore Operation

Semaphore Implementation

Producer Consumer problem with semaphores

Careless Usage of semaphore causes deadlock 
Dining Philosophers Problem
Reader’s and Writer’s Problem
Mutexes
Monitor

Implementation of Monitor

Producer Consumer with Monitor
Message Passing

Producer Consumer with Message Passing
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Mutual Exclusion with Sleep and Wakeup
Sleep and Wakeup-
A process check a resource (critical section), if not available go 
to sleep. 
When the resource become available, the process will be waked 
up by system or the process release the resource.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
The Producer-Consumer Problem
Description
Two processes share a common, fixed-sized buffer. 
Producer puts information into the buffer, and consumer takes it 
out.
Troubles arises 
When the producer wants to put a new item in the buffer, but it is 
already full.
When the consumer tries to take a item from the buffer, but buffer 
is already empty.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
The Producer-Consumer Problem
When the producer wants to put a new item in the buffer, 
but it is already full.
Solution – producer is go to sleep, awakened by customer when 
customer has removed on or more items.
When the consumer tries to take a item from the buffer, 
but buffer is already empty.
Solution – customer is go to sleep, awakened by the producer 
when producer puts one or more information into the buffer.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
The Producer-Consumer Problem
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
#define N 100 //buffer size
int count = 0;//# of item
void producer()
{
int item
while (true)
{
item = produce_item();
if (count == N)
sleep();
insert_item(item)
count = count + 1;
if (count ==1)
wakeup(consumer);
}
}
void consumer()
{
int item;
while(true)
{
if (count == 0)
sleep();
item = remove_item();
count = count – 1;
if (count == N – 1)
wakeup(producer);
consume_item(item);
}
}
' metadata={'source': '/tmp/tmpvzpwtyc1', 'file_path': '/tmp/tmpvzpwtyc1', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}
2024-12-18 07:19:47 - INFO - Invoking chain
2024-12-18 07:19:47 - INFO - Successfully loaded 5 documents from: 450Slides10.pdf
2024-12-18 07:19:47 - INFO - Docs: [Document(metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n1\nPreview\nInter-Process Communication\n\ue007Race Condition\n\ue007Critical Section (or region)\n\ue007Solutions for Mutual Exclusion in a Critical Section\n◼With Busy Waiting\n\ue007Disabling Interrupts –non-preemptive kernel\n\ue007Lock Variables –violating the first necessary condition (mutual exclusion )\n\ue007Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\ue007Peterson’s Solution\n\ue007Hardware Solution\n▪\nTest and Set Lock –\n▪\nMemory Barriers\n▪\nAtomic Variable\n\ue007Priority Inversion problems with busy waiting\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n1\nInterprocess Communication\n\ue007\nThree issues in interprocess communication\n1.\nHow one process can pass information to another (communication\nbetween processes) – with IPCS (shared memory, message queue,\nFIFO, PIPE, socket, …)\n2.\nHow to make sure two or more processes do not get into the\ncritical section (mutual exclusion)- with mutex, semaphore\n3.\nProper sequencing (Synchronization) when dependencies are\npresent (ex. A create outputs, B consume the outputs)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n2\nInterprocess Communication\n(Race Condition)\n\ue007Race Condition\n◼A situation where two or more processes are reading or writing some shared\ndata and the final result depends on who runs precisely when, are called race\ncondition.\n\ue007Critical section (critical region)\n◼The part of program where the shared memory is accessed.\n\ue007Mutual Exclusion in a critical section can avoid races condition:\n◼If we could arrange matters such that no two processes were ever in their\ncritical regions at the same time, we can avoid races condition.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n3\nInterprocess Communication\n(Race Condition)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n4\nSlots for file names\n• When a process want\nto print a file, it enter a\nfile name in a special\nspooler directory in\nprinter\n• Printer daemon\nperiodically check\nspooler directory any file\nneed to be printed.\nShared variable\nInterprocess Communication\n(Race Condition)\n\ue007\nProcess A tried to send a job to\nspooler, Process A read in = 7,\nprocess A time out and go to ready\nstate before updating in = in + 1.\n\ue007\nProcess B tried to send a job to\nspooler. Process B read in = 7, load\nits job name in slot 7, update i = i +\n1 = 8 and then go to block state for\nwaiting for job.\n\ue007\nProcess A is rescheduled by\nscheduler. Process A already read in\n= 7, Process A load its job name in\nslot 7, update i = i + 1 = 9 and then\ngo to blocked state waiting for this\njob finish.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n5\nInterprocess Communication\n(Race Condition)\n\ue007How to avoid race condition?\nMutual exclusion – some way of making sure that if one process is using a\nshared variable or file, the other processes will be excluded from doing the same\nthing.\n\ue007The choice of the algorithm for achieving mutual exclusion is a\nmajor design issue in any operating system.\n\ue007A solution for the race condition should have following four\nconditions\n1.\nNo two processes may be simultaneously inside their critical regions – mutual\nexclusion\n2.\nNo process running outside its critical region may block other processes\n3.\nNo process should have to wait forever to enter critical region\n4.\nNo assumptions may be made about speeds or the number of CPUs.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n6\n'), Document(metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n2\nInterprocess Communication\n(Race Condition)\n\ue007Two approaches for mutual exclusion solutions.\n◼Busy wait – A process will wait until resource become available\nor CPU time term expired.\n◼Sleep and Wakeup – A process check a resource, if not available\ngo to sleep. When the resource become available, the process\nwill be waked up by system or the process release the resource.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n7\nMutual Exclusion with Busy Waiting\n\ue007Each process has time term. A process keep checking the\npossibility to get into critical section.\n\ue007Mutual Exclusion with Busy Waiting\n◼Disabling Interrupts –non-preemptive kernel\n◼Lock Variables\n◼Strict Alternation\n◼Peterson’s Solution\n◼Hardware Solutions\n\ue007Test and Set Lock\n\ue007Memory Barriers\n\ue007Atomic Variable\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n8\nMutual Exclusion with Busy Waiting\n(Disabling Interrupt – Nonprimitive Kernel)\nDisabling Interrupt\n\ue007Once a process get into the critical section, interrupts set to disable.\n\ue007Other process cannot get CPU time until the process finish its job in\nthe critical section.\n\ue007Since each user process has power to control interrupt, it might\ncause the end of system.\n\ue007We can build a simple program which can disable entire system\nsince user has control system interrupt. (vulnerable system)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n9\nMutual Exclusion with Busy Waiting\n(Disabling Interrupt – Nonprimitive Kernel)\nEx) End of the system with Disabling interrupt\n1. A process get into the critical section.\n2. It make disable all the interrupts – which means all\nother process are sleeping until the job is done in the\ncritical section.\n3. The process has blocked outside critical section just\nbefore make enable all the interrupts and never return\nagain, cause end of the system.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n10\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\n\ue007There are variable called “Lock”\n◼A process can enter in its critical section when Lock = 0.\n◼Lock =0 means no process is currently running in the critical\nsection, set Lock =1 and enter in the critical section.\n◼Once a process finish its job in critical section, set Lock = 0 and\nlet other process in the critical section\n◼Lock = 1 means there is a process running in the critical section,\na process do busy waiting until Lock become 0.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n11\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n12\nstatic int lock = 0; //lock variable is initially 0\nrepeat\nwhile lock \ue0060do\n; (no-operation) // Busy waiting\nlock = 1;\nlock = 0;\nuntil false\nCritical Section\nRemainder Section\n'), Document(metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n3\nMutual Exclusion with Busy Waiting\n(Using Lock Variable)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n13\nstatic int lock = 0; //lock is initially 0\nrepeat\nwhile lock \ue0060 do\n; (no-operation) //busy waiting\nlock = 1;\nlock = 0;\nuntil false\nCritical Section\nRemainder Section\nScenario)\n1.\nInitially lock = 0.\n2.\nA process P1 tries get into critical section.\nThe process P1 check lock value = 0.\n3.\nProcess P1 CPU time is over and go to\nready state, before updating lock = 1.\n4.\nProcess P2 tries get into critical section.\nP2 check lock value lock = 0\n5.\nP2 set lock = 1 and go to critical section.\n6.\nP2 CPU time is over and P1 is rescheduled.\n7.\nP1 already read lock = 0, P1 set lock = 1\nand go to Critical section. Now P1 and P2\nare in the critical section at the same\ntime\nViolating condition #1: mutual exclusion\nMutual Exclusion with Busy Waiting\n(Strict Alternation)\n\ue007Variable turn can be i or j.\n\ue007if turn = i, process Pi can go to the\ncritical section.\n\ue007Once Pi finish its job in critical\nsection, Pi set turn = j, let process\nPj enter critical section\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n14\nCritical Section\nRemainder Section\nturn is i or j\nrepeat\nwhile turn \ue006i do\n; (no-operation)\nturn = j;\nuntil false\nMutual Exclusion with Busy Waiting\n(Strict Alternation)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n15\nCritical Section\nRemainder Section\nturn is i or j\nrepeat\nwhile turn \ue006i do\n; (no-operation)\nturn = j;\nuntil false\nLet assume initially turn = 0\n1.\nP0 is in CS while P1 is in remaining\nsection.\n2.\nP0 done C.S. and set turn = 1, P1 is\nstill in remaining section.\n3.\nP0 done remaining section and want\nto go to C.S. but turn= 1.\n4.\nP1 has fatal error in remainder\nsection and trapped out by OS.\n5.\nP0 is waiting forever to enter the C.S.\nViolating #2 and #3 condition\n2.\nNo process running outside its critical\nregion may block other processes\n3.\nNo process should have to wait forever to\nenter critical region\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\n\ue007Peterson’s solution provides a good algorithmic description of\nsolving the critical-section problem and illustrates some of the\ncomplexities involved in designing software that addresses the\nrequirements of mutual exclusion, progress, and bounded waiting.\n\ue007Peterson’s solution is restricted to two processes that alternate\nexecution between their critical sections and remainder sections.\n\ue007The processes are numbered P0 and P1.\n\ue007For convenience, when presenting Pi, we use Pj to denote the other\nprocess; that is, j equals 1 −i.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n16\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n17\n#define false 0\n#define true 1\n#define n 2\nint turn\nint interested[n]\nvoid enter_region(int process);\n{\nint other;\nother = 1 – process\ninterested[process] = true\nturn = process;\nwhile (turn ==process && interest[other]==true)\n; /*no operation –busy waiting*/\n}\nvoid leave_region(int process)\n{\ninterest[process] = false;\n}\nvoid main()\n{\nrepeat\nenter_region (int i)\nCritical Section\nleave_resion (int i)\nRemainder Section\nuntil false\n}\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\n1.\nInitially, neither process is in the critical section\n2.\nA process P0 call enter_region (0)\na)\nSet interested[0] = true;\nb)\nSet turn = 0\n3.\ngo to critical section\n4.\nthe process P1 call enter_region(1) to get into its critical section\na)\nset interested[1] = true;\nb)\nset turn = 1;\n5.\nsince interested[0] = true, it is keep looping for interest [0] =\nfalse\n6.\nfinally process P0 finish its critical section and call leave_region(0)\n1.\nset interested[0] = false\n7.\nnow P1 find out interest[0] = false, P1 goes to its critical section\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n18\n'), Document(metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content='9/17/2024\n4\nMutual Exclusion with Busy Waiting\n(Peterson’s Solution)\nProve for Peterson’s Solution)\n\ue007\nLets consider the case both P0 and P1 call enter_region(0) and enter_region(1) almost\nsimultaneously.\n\ue007\nLets interest[0]= true and interest[1] = true at the same time\n\ue007\nBut turn can be only turn = 0 or turn = 1 which ever store is done last is the one that\ncounts!!\nCase 1) turn = 0\nInside enter_region(0)\n◼\nSince turn =0 and interest [1] = ture, P0 keep looping in no-operation until P1 set interested[1] =\nfalse.\nInside enter_region(1)\n◼\nSince turn = 0 and interest[0] = true, P1 goes to its critical section.\nCase 2) turn = 1\nInside enter_region(0)\n◼\nSince turn =1 and interest [1] = ture,. P0 goes to its critical section\nInside enter_region(1)\n◼\nSince turn = 1 and interest[0] = true, P1 keep looping in no-operation until P0 set interested[0] =\nfalse.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n19\nMutual Exclusion with Busy Waiting\n(Test and Set Lock – hardware solution)\n\ue007\nSince TSL instruction is a hardware instruction. The operations of reading the\nlock and storing into register are guaranteed to be indivisible.\n\ue007\nInstruction test and set lock\nTSL RX, LOCK\n1. Read the content at the memory address of LOCK into register RX.\n2. Store a non-zero value at the memory address of LOCK\n\ue007\nThe operations of reading the content of LOCK and storing into it are guaranteed\nto be indivisible.\n\ue007\nHow to use Test and Set Lock instruction for solving race condition?\n◼\nWhen LOCK = 0, any process may set LOCK = 1 by using TSL instruction and go to\nits critical section.\n◼\nWhen the process finish its critical section, set LOCK = 0 using the original move\ninstruction.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n20\nMutual Exclusion with Busy Waiting\n(Test and Set Lock – hardware solution)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n21\nEnter_region\nTSL Register, LOCK\nCMP Register, #0\nJNE Enter_region\nSet LOCK, #1\nRET\nLeave_region\nMOVE LOCK, #0\nRET\nRepeat\nEnter_region\nLeave_region\nuntil false\nCritical Section\nRemainder Section\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007Two general memory models\n◼Strongly ordered Memory –a memory modification on one processor is\nimmediately visible to all other processors\n◼Weakly ordered Memory – a memory modification on one processor may not\nbe immediately visible to other processors.\n\ue007With Strongly ordered memory, computer architectures provide\ninstructions that can force any changes in memory to be\npropagated to all other processors, thereby ensuring that memory\nmodifications are visible to threads (or processes) running on other\nprocessors.\n\ue007Such instructions are known as memory barriers or memory\nfences.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n22\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007A memory barrier is a type of barrier instruction that causes a\ncentral processing unit (CPU) or compiler to enforce an ordering\nconstraint on memory operations issued before and after the\nbarrier instruction.\n\ue007This typically means that operations issued prior to the barrier are\nguaranteed to be performed before operations issued after the\nbarrier.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n23\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\nEx)\n\ue007Lets assume two threads (or processes) are running on different\npart of program by sharing two variables. (bool flag = false; int x=0;)\n\ue007Thread 1 might print 0 or 100 depends on the order of execution.\n\ue007By using memory barrier instruction Thread1 always print 100.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n24\nwhile (!flag)\nprint x;\nx = 100\nflag = true;\nThread 1\nThread 2\n'), Document(metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}, page_content="9/17/2024\n5\nMutual Exclusion with Busy Waiting\n(Memory Barriers– hardware solution)\n\ue007Now it is guarantee that the value of flag is loaded before the value of x\n\ue007Also it is guarantee that assignment to x occurs before the assignment to flag.\n\ue007So Thread 1 always print 100\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n25\nwhile (!flag)\nmemory_barrier();\nprint x;\nx = 100;\nmemory_barrier();\nflag = true;\nThread 1\nThread 2\nMutual Exclusion with Busy Waiting\n(Atomic Variables– hardware solution)\n\ue007We can avoid mutual exclusion by using atomic operations.\n\ue007When a thread (or process) performs an atomic operation, the\nother threads (or process) see it as happening instantaneously.\n\ue007The advantage of atomic operations is that they are relatively quick\ncompared to locks, and do not suffer from deadlock and convoying.\n\ue007The disadvantage is that they only do a limited set of operations,\nand often these are not enough to synthesize more complicated\noperations efficiently.\n\ue007But nonetheless you should not pass up an opportunity to use an\natomic operation in place of mutual exclusion.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n26\nMutual Exclusion with Busy Waiting\n(Priority Inversion Problem)\n\ue007Peterson's solution, test and set lock, Memory Barrier, Atomic variable method –\nbusy waiting – (wasting CPU time)\nPriority Inversion problem with busy waiting method\n\ue007A computer with two processes PH with high priorities, and PL with low priorities.\n\ue007The scheduling rules are such that PH get CPU time whenever it is in ready state.\n(preemptive priority scheduling)\n1. At a time T0: PL is in critical section, and PH is in block state.\n2. At a time T1: PH change sate from block to ready state and try to enter the critical\nsection. PL still in critical section.\n3. Based on scheduling rule, short-term scheduler select PH, PH hold CPU and try to enter\ninto critical section.\n4. Since PL is in critical section, PH run busy waiting outside critical section forever since\nPL does not have a chance to get CPU time to finish its critical section.\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n27\nMutual Exclusion with Busy Waiting\n(Priority Inversion Problem)\nCOSC450 Operating System, Fall2024\nDr. Sang-Eon Park\n28\nBlock\nRunning\nReady\nT0 :\nPL: running state in critical section\nPH: block state\nPH\nPL\nBlock\nRunning\nReady\nPH\nPL\nT1 : PH become ready state\nPL: ready state in critical section\nPH: ready state\nCPU scheduler will select higher\npriority process\nBlock\nRunning\nReady\nPH\nPL\nTi>1\nPL: ready state in critical section\nPH: busy waiting in running state\nPH become ready state\nScheduler keep selecting\nPH since higher priority\nThe scheduling rules : CPU scheduler will always select higher priority process.\n")] for 450Slides10.pdf using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Document 1 (450Slides10.pdf) of 5
2024-12-18 07:19:47 - INFO - Starting clean_files_chain
2024-12-18 07:19:47 - INFO - Document: page_content='9/17/2024
1
Preview
Inter-Process Communication
Race Condition
Critical Section (or region)
Solutions for Mutual Exclusion in a Critical Section
◼With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution
▪
Test and Set Lock –
▪
Memory Barriers
▪
Atomic Variable
Priority Inversion problems with busy waiting
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
1
Interprocess Communication

Three issues in interprocess communication
1.
How one process can pass information to another (communication
between processes) – with IPCS (shared memory, message queue,
FIFO, PIPE, socket, …)
2.
How to make sure two or more processes do not get into the
critical section (mutual exclusion)- with mutex, semaphore
3.
Proper sequencing (Synchronization) when dependencies are
present (ex. A create outputs, B consume the outputs)
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
2
Interprocess Communication
(Race Condition)
Race Condition
◼A situation where two or more processes are reading or writing some shared
data and the final result depends on who runs precisely when, are called race
condition.
Critical section (critical region)
◼The part of program where the shared memory is accessed.
Mutual Exclusion in a critical section can avoid races condition:
◼If we could arrange matters such that no two processes were ever in their
critical regions at the same time, we can avoid races condition.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
3
Interprocess Communication
(Race Condition)
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
4
Slots for file names
• When a process want
to print a file, it enter a
file name in a special
spooler directory in
printer
• Printer daemon
periodically check
spooler directory any file
need to be printed.
Shared variable
Interprocess Communication
(Race Condition)

Process A tried to send a job to
spooler, Process A read in = 7,
process A time out and go to ready
state before updating in = in + 1.

Process B tried to send a job to
spooler. Process B read in = 7, load
its job name in slot 7, update i = i +
1 = 8 and then go to block state for
waiting for job.

Process A is rescheduled by
scheduler. Process A already read in
= 7, Process A load its job name in
slot 7, update i = i + 1 = 9 and then
go to blocked state waiting for this
job finish.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
5
Interprocess Communication
(Race Condition)
How to avoid race condition?
Mutual exclusion – some way of making sure that if one process is using a
shared variable or file, the other processes will be excluded from doing the same
thing.
The choice of the algorithm for achieving mutual exclusion is a
major design issue in any operating system.
A solution for the race condition should have following four
conditions
1.
No two processes may be simultaneously inside their critical regions – mutual
exclusion
2.
No process running outside its critical region may block other processes
3.
No process should have to wait forever to enter critical region
4.
No assumptions may be made about speeds or the number of CPUs.
COSC450 Operating System, Fall2024
Dr. Sang-Eon Park
6
' metadata={'source': '/tmp/tmp0oevipzo', 'file_path': '/tmp/tmp0oevipzo', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': '', 'author': '', 'subject': '', 'keywords': '', 'creator': 'Mozilla Firefox 132.0.2', 'producer': 'cairo 1.18.0 (https://cairographics.org)', 'creationDate': "D:20241212024700-05'00", 'modDate': '', 'trapped': ''}
2024-12-18 07:19:47 - INFO - Invoking chain
2024-12-18 07:19:47 - INFO - Successfully loaded 5 documents from: cosc450_11.pdf
2024-12-18 07:19:47 - INFO - Docs: [Document(metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n1\nReview\nInter-Process Communication\n\uf070Race Condition\n\uf070Critical Section (or region) \n\uf070Solutions for Mutual Exclusion in a Critical Section\n\uf06eWith Busy Waiting\n\uf070Disabling Interrupts –non-preemptive kernel\n\uf070Lock Variables –violating the first necessary condition (mutual exclusion )\n\uf070Strict Alternation –violating the second necessary condition ( block by a process outside critical section)\n\uf070Peterson’s Solution\n\uf070Hardware Solution\n\uf0a7\nTest and Set Lock –\n\uf0a7\nMemory Barriers\n\uf0a7\nAtomic Variable\n\uf070Priority Inversion problems with busy waiting\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n1\nPreview\n\uf070Mutual Exclusion in a Critical Section\n\uf06eWith Sleep and Wake up\n\uf070Producer Consumer Problem\n\uf070Race Condition Producer Consumer problem\n\uf070Semaphore\n\uf0a7\nConcept of Semaphore\n\uf0a7\nSemaphore Operation\n\uf0a7\nSemaphore Implementation\n\uf0a7\nProducer Consumer problem with semaphores\n\uf0a7\nCareless Usage of semaphore causes deadlock \n\uf070Dining Philosophers Problem\n\uf070Reader’s and Writer’s Problem\n\uf070Mutexes\n\uf070Monitor\n\uf0a7\nImplementation of Monitor\n\uf0a7\nProducer Consumer with Monitor\n\uf070Message Passing\n\uf0a7\nProducer Consumer with Message Passing\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n2\nMutual Exclusion with Sleep and Wakeup\n\uf070Sleep and Wakeup-\n\uf06eA process check a resource (critical section), if not available go \nto sleep. \n\uf06eWhen the resource become available, the process will be waked \nup by system or the process release the resource.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n3\nThe Producer-Consumer Problem\nDescription\n\uf070Two processes share a common, fixed-sized buffer. \n\uf070Producer puts information into the buffer, and consumer takes it \nout.\nTroubles arises \n\uf070When the producer wants to put a new item in the buffer, but it is \nalready full.\n\uf070When the consumer tries to take a item from the buffer, but buffer \nis already empty.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n4\nThe Producer-Consumer Problem\n\uf070When the producer wants to put a new item in the buffer, \nbut it is already full.\n\uf06eSolution – producer is go to sleep, awakened by customer when \ncustomer has removed on or more items.\n\uf070When the consumer tries to take a item from the buffer, \nbut buffer is already empty.\n\uf06eSolution – customer is go to sleep, awakened by the producer \nwhen producer puts one or more information into the buffer.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n5\nThe Producer-Consumer Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n6\n#define N 100 //buffer size\nint count = 0;//# of item\nvoid producer()\n{\nint item\nwhile (true)\n{\nitem = produce_item();\nif (count == N)\nsleep();\ninsert_item(item)\ncount = count + 1;\nif (count ==1)\nwakeup(consumer);\n}\n}\nvoid consumer()\n{\nint item;\nwhile(true)\n{\nif (count == 0)\nsleep();\nitem = remove_item();\ncount = count – 1;\nif (count == N – 1)\nwakeup(producer);\nconsume_item(item);\n}\n}\n'), Document(metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 1, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n2\nSemaphores – by E. W. Dijkstra \n\uf070A semaphore is an integer variable which could have \nvalue \n\uf06e0:  no wakeups are saved\n\uf06e+ i: i wakeups are pending\n\uf070A semaphore is accessed only through two standard \natomic operations down (or P) and up (or V).\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n7\nConcept of Semaphores\n\uf070Modification to the integer value of the semaphore in the \ndown and up operations are executed indivisibly. \n\uf070Which means that when a process is modifying the \nsemaphore value, no other process can simultaneously \nmodify that same semaphore value.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n8\nSemaphore Operation\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n9\nvoid down (S)\n{\nif S == 0\n{\n1. Add this process to the sleeping list\n2. block;\n}\nS = S – 1;\n}\nvoid up (S)\n{\nS = S + 1;\nIf S = 1\n{\n1. choose one process P from the \nsleeping list or let them move to \nready state\n2. wakeup(P) to finish down operation\n}\n}\nSemaphore Implementation\nThe normal way for implementing a semaphore\n\uf070Implement semaphore operations up and down as \nsystem call.\n\uf070operating system briefly disabling all interrupts while it is \ntesting the semaphore, updating it and putting the \nprocess to sleep.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n10\nSolving the Producer-Consumer Problem using \nSemaphores\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1;  //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item(); //produce item\ndown (&empty); //check empty space\ndown (&mutex); //check mutual exclusion\ninsert_item(item); //insert item\nup(&mutex); //out from critical section\nup(&full); //increase # of item\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full); //check item in buffer\ndown(&mutex) //check mutual exclusion\nitem = remove_item(); //remove a item\nup(&mutex); //out from critical section\nup(&empty); //increase the empty space\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n11\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&mutex);\ndown (&empty);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&full)\ndown(&mutex)\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n12\n'), Document(metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 2, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content="9/26/2024\n3\nCareless usage of Semaphore causes deadlock\n#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1; //mutual exclusion\nsemaphore empty = N; // empty space\nsemaphore full = 0; // number of item\nvoid producer ()\n{\nint item;\nwhile (ture)\n{\nitem = produce_item();\ndown (&empty);\ndown (&mutex);\ninsert_item(item);\nup(&mutex);\nup(&full);\n}\n}\nvoid consumer()\n{\nint item;\nwhile (true)\n{\ndown(&mutex);\ndown(&full);\nitem = remove_item();\nup(&mutex);\nup(&empty);\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n13\nDining Philosophers Problem\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n14\nDining Philosophers Problem\n\uf070Five silent philosophers sit at a round table with bowls of spaghetti. Chopsticks \nare placed between each pair of adjacent philosophers.\n\uf070Each philosopher must alternately think and eat. However, a philosopher can \nonly eat spaghetti when they have both left and right chopsticks. \n\uf070Each chopstick can be held by only one philosopher and so a philosopher can use \nthe chopstick only if it is not being used by another philosopher. \n\uf070After an individual philosopher finishes eating, they need to put down both \nchopsticks so that the chopstick s become available to others. A philosopher can \ntake the chopstick on their right or the one on their left as they become \navailable, but cannot start eating before getting both chopsticks.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n15\nReaders-Writers Problem\n\uf070Process reader R and writers W are sharing resources at one time. \nOnly one process (reader or writer) can access the shared \nresources at any time.\n1. It is possible that a reader R1 might have the lock to a shared resource, and \nthen another reader R2 requests access. It would be foolish for R2 to wait \nuntil R1 was done before starting its own read operation; instead R1 and R2\ncan read same resource at the same time since both are reading.\n2. It is possible that a reader R1 might have the lock, a writer W be waiting for \nthe lock, and then a reader R2 requests access. It would be unfair for R2 to \njump in immediately, ahead of W; if that happened often \nenough, W would starve.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n16\nReaders-Writers Problem\nW2\nR3\nW1\nR2\nR1\nW2\nW1\nR1\nR2\nR3\nR4\nR3\nR2\nW1\nR1\nW1\nR1\nR4\nR2\nR3\nUnfair for W1 (starvation)\nMight be better\nShared resource(database)\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n17\nMutexes\n\uf070When the semaphore's ability to count is not needed, the simplified \nversion of the semaphore, called mutex is used.\n\uf070It is good for managing a mutual exclusion to some shared \nresources or pieces of code\n\uf070It is useful in thread packages that are implemented in user’s \nspace.\n\uf070A mutex is a variable that can be in one of two state: unlocked (0), \nlocked(1).\n\uf070A mutex concept is same as binary semaphore which has value 0 \nor 1.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n18\n"), Document(metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 3, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n4\nMutexes\nmutexes mutex = 0\nrepeat\nmutex_lock (mutex);\nmutex_unlock (mutex);\nuntil false\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n19\nCritical Section\nRemainder Section\nMonitor\n\uf070\nMonitor – High level synchronizing primitive \n\uf06e\nA collection of procedures, variables, and data structures that are all grouped \ntogether in a special kind of module.\n\uf06e\nOnly one process can be active in a monitor at any instant.\n\uf06e\nCompiler knows that monitors are special and can handle calls to monitor \nprocedure differently from other procedure call (create special code for \nmonitor).\n\uf06e\nWhen a process call a procedure inside a monitor, \n1.\ncheck whether any process is active within monitor or not. \n2.\nIf so, the calling process will be suspended until the other process has left the \nmonitor.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n20\nImplementation of Monitor\n\uf070Since monitor is a construct for a programming \nlanguage, Monitor implementation is based on the \ncompiler\n\uf070Compiler knows monitor is special kind of module, \ncompiler use mutex or binary semaphore for mutual \nexclusion.\n\uf070Monitor provide an easy way to achieve mutual exclusion. \nBut we need to consider, how a process can be blocked \nand how blocked process can be waked up?\n\uf06eIntroduction of Condition variables\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n21\nImplementation of Monitor\n\uf070Conditional variables are used in the monitor. \n\uf070There are two operation on the conditional variables (wait, signal).\n\uf070When a monitor procedure discovers that it cannot continue, it does wait \non some condition variable (ex full). This action causes the calling \nprocess to block. – allows other process get into the monitor.\n\uf070Other process (ex. consumer) can wake up its sleeping partner by doing \na signal on the condition variable that its partner is waiting on.\n\uf070If there are more than one processes are waiting on a condition variable, \nsystem scheduler choose one of them \nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n22\nImplementation of Monitor\nOnce a process do a signal, what is next step for the process do a \nsignal, to avoid having two active processes in the monitor at the \nsame time?\nSolution 1) by Hoare\n\uf06eLetting the newly awakened process run, suspending the one do the signal\nSolution 2) by Brinch Hansen\n\uf06eA signal statement may appear only as the final statement in a monitor \nprocedure.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n23\nProducer-Consumer with Monitor\nmonitor ProducerConsumer\ncondition full, empty;\ninteger count;\nprocedure insert (item: integer);\nbegin\nif count = N then\nwait (full);\ninsert_item(item);\ncount :=count + 1;\nif count = 1 then\nsignal (empty)\nend;\nfunction remove: integer;\nbegin\nif count = 0 then\nwait (empty);\nremove = remove_item;\ncount := count – 1;\nif count = N – 1 then\nsignal (full);\nend;\ncount := 0;\nend monitor\nprocedure producer\nbegin\nwhile true do\nbegin\nitem = produce_item;\nProducerConsumer.insert(item)\nend\nend;\nprocedure consumer;\nbegin\nwhile true do\nbegin\nitem = ProducerConsumer.remove;\nconsume_item(item)\nend\nend;\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n24\n'), Document(metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 4, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}, page_content='9/26/2024\n5\nMessage Passing\n\uf070Message Passing is a method of interprocess communication by using two \nprimitive system calls\n\uf06esend(destination, &message);\n\uf06ereceive(source, &message);\n\uf070Usually Message Passing is used between processes located in different system \nsince it is slower than using semaphore or monitor in the same system.\n\uf070If there is no message is available, the receiver will be blocked by system until \none arrived.\n\uf070If there is no message to send, the sender will be blocked by system until one \nbecome available.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n25\nMessage Passing\n(Design Issues for Message Passing System)\n\uf070Message can be lost\n\uf06eSolution: \n\uf070When a message is received, receiver send acknowledgement message.\n\uf070If sender has not received the ack. message within a certain time interval, retransmits the \nmessage.\n\uf06eThis solution cause new design issue. \n\uf070Receiver receive a message from sender, receiver send Ack. message. If the Ack. \nmessage lost, sender send same message again. Then receiver receive same \nmessage twice.\n\uf06eSolution:\n\uf070Each message is assigned with sequence number.\n\uf070Receiver site system can recognize duplicated message and discard one of them.\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n26\nProducer-Consumer Problem \n(with Message Passing)\n#define N 100\n/* number of slots in the buffer */\nvoid producer ()\n{\nint item;\nmessage m;\n/* message buffer */\nwhile (ture)\n{\nitem = produce_item();\n/* generate item to put in buffer */\nreceive(consumer, &m);\n/* wait for an empty slot (ACK)*/\nbuild_message(&m, item);\n/* construct a message to send */\nsend(consumer, &m);\n/* send item to consumer */\n}\n}\nvoid consumer()\n{\nint item, i;\nmessage m;\nfor (i=0; i < N; i++)\n/* send N empty messages*/\nsend(producer, &m);\nwhile (true)\n{\nreceive(producer, &m);\n/* receive a message from producer */\nitem = extract_item(&m);\n/* extract a message */\nsend(producer, &m)\n/* send an empty message to producer (ACK)*/\nconsume_item(item);\n}\n}\nCOSC450  Operating System, Fall 2024                                               \nDr. Sang-Eon Park\n27\n')] for cosc450_11.pdf using PyMuPDFLoader
2024-12-18 07:19:47 - INFO - Document 1 (cosc450_11.pdf) of 5
2024-12-18 07:19:47 - INFO - Starting clean_files_chain
2024-12-18 07:19:47 - INFO - Document: page_content='9/26/2024
1
Review
Inter-Process Communication
Race Condition
Critical Section (or region) 
Solutions for Mutual Exclusion in a Critical Section
With Busy Waiting
Disabling Interrupts –non-preemptive kernel
Lock Variables –violating the first necessary condition (mutual exclusion )
Strict Alternation –violating the second necessary condition ( block by a process outside critical section)
Peterson’s Solution
Hardware Solution

Test and Set Lock –

Memory Barriers

Atomic Variable
Priority Inversion problems with busy waiting
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
1
Preview
Mutual Exclusion in a Critical Section
With Sleep and Wake up
Producer Consumer Problem
Race Condition Producer Consumer problem
Semaphore

Concept of Semaphore

Semaphore Operation

Semaphore Implementation

Producer Consumer problem with semaphores

Careless Usage of semaphore causes deadlock 
Dining Philosophers Problem
Reader’s and Writer’s Problem
Mutexes
Monitor

Implementation of Monitor

Producer Consumer with Monitor
Message Passing

Producer Consumer with Message Passing
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
2
Mutual Exclusion with Sleep and Wakeup
Sleep and Wakeup-
A process check a resource (critical section), if not available go 
to sleep. 
When the resource become available, the process will be waked 
up by system or the process release the resource.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
3
The Producer-Consumer Problem
Description
Two processes share a common, fixed-sized buffer. 
Producer puts information into the buffer, and consumer takes it 
out.
Troubles arises 
When the producer wants to put a new item in the buffer, but it is 
already full.
When the consumer tries to take a item from the buffer, but buffer 
is already empty.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
4
The Producer-Consumer Problem
When the producer wants to put a new item in the buffer, 
but it is already full.
Solution – producer is go to sleep, awakened by customer when 
customer has removed on or more items.
When the consumer tries to take a item from the buffer, 
but buffer is already empty.
Solution – customer is go to sleep, awakened by the producer 
when producer puts one or more information into the buffer.
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
5
The Producer-Consumer Problem
COSC450  Operating System, Fall 2024                                               
Dr. Sang-Eon Park
6
#define N 100 //buffer size
int count = 0;//# of item
void producer()
{
int item
while (true)
{
item = produce_item();
if (count == N)
sleep();
insert_item(item)
count = count + 1;
if (count ==1)
wakeup(consumer);
}
}
void consumer()
{
int item;
while(true)
{
if (count == 0)
sleep();
item = remove_item();
count = count – 1;
if (count == N – 1)
wakeup(producer);
consume_item(item);
}
}
' metadata={'source': '/tmp/tmpclz28mgf', 'file_path': '/tmp/tmpclz28mgf', 'page': 0, 'total_pages': 5, 'format': 'PDF 1.7', 'title': 'Preview', 'author': 'Sang-Eon Park', 'subject': '', 'keywords': '', 'creator': 'Microsoft® PowerPoint® LTSC', 'producer': 'Microsoft® PowerPoint® LTSC', 'creationDate': "D:20240926124054-04'00'", 'modDate': "D:20240926124054-04'00'", 'trapped': ''}
2024-12-18 07:19:47 - INFO - Invoking chain
2024-12-18 07:19:47 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:47 - ERROR - Error processing tasks: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-**************************************************************************************************************************************************************SVAA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}
2024-12-18 07:19:47 - INFO - Cleaning up temp files
2024-12-18 07:19:47 - INFO - Deleted temp file: /tmp/tmp0oevipzo
2024-12-18 07:19:47 - INFO - Deleted temp file: /tmp/tmpvzpwtyc1
2024-12-18 07:19:47 - INFO - Deleted temp file: /tmp/tmpfrlfb1w6
2024-12-18 07:19:47 - INFO - Deleted temp file: /tmp/tmpclz28mgf
2024-12-18 07:19:47 - INFO - Temp files cleaned
2024-12-18 07:19:47 - INFO - Run function completed
2024-12-18 07:19:47 - INFO - Test generated successfully
2024-12-18 07:19:47 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:47 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
2024-12-18 07:19:47 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 401 Unauthorized"
