"Nondeterministic Finite Automata\n\nNondeterminism gives a machine multiple options for its moves.Nondeterministic Finite Automata\n\nIn a nondeterministic finite automaton (NFA), for each state there can be zero, one, two, or more transitions corresponding to a particular symbol.\n\nIf the NFA reaches a state with more than one possible transition corresponding to the input symbol, we say it branches.\n\nIf the NFA reaches a state where there is no valid transition, then that branch dies.NFA Acceptance\n\nAn NFA (nondeterministic finite automaton) accepts the input string if there exists some choice of transitions that leads to ending in an accept state. Thus, one accepting branch is enough for the overall NFA to accept, but every branch must reject for the overall NFA to reject.\n\nThis is a model of computation. We write DFA (deterministic finite automaton) to specify a deterministic finite automaton (the one defined earlier). If type doesn\u2019t matter, we now just write FA (finite automaton).Example\nWhat does this NFA accept?\nA\nB\nD\nC\n0, 1\n0\n1\n0\n1\n0, 1\nGoddard 3a: 4Example: Doubles\n\nWhat does this NFA accept?\n\nStates: A, B, C, D\n\nInput Symbols: 0, 1\n\nTransitions:\n- From A: 0 -> B, 1 -> C\n- From B: 0 -> A, 1 -> D\n- From C: 0 -> D, 1 -> A\n- From D: 0 -> C, 1 -> B\n\nIt accepts any binary string that contains '00' or '11' as a substring.\n\nGoddard 3a: 5Example: Ending of Strings\nAn NFA (Nondeterministic Finite Automaton) that accepts all binary strings that end with 101.\nGoddard 3a: 6Example: Ending of Strings\nAn NFA (Non-deterministic Finite Automaton) that accepts all binary strings that end with 101.\n\nState Diagram:\n\nStates: A, B, C, D\nAlphabet: 0, 1\n\nTransitions:\n- From State A:\n  - Input 1 -> Move to State B\n  - Input 0 -> Stay in State A\n\n- From State B:\n  - Input 0 -> Move to State C\n  - Input 1 -> Stay in State B\n\n- From State C:\n  - Input 1 -> Move to State D\n  - Input 0 -> Stay in State A\n\n- From State D:\n  - Input 0 -> Stay in State A\n  - Input 1 -> Stay in State B\n\nThis automaton will accept any binary string that ends with the sequence 101.Example: Simultaneous Patterns\n\nAn NFA for the expression a* + (ab)*\n\nGoddard 3a: 8Example: Simultaneous Patterns\n\nAn NFA for the expression a* + (ab)*\n\nDiagram:\n\nState transitions:\n\n- From start state to itself on input 'a'\n- From start state to 'b' after reading 'a'\n- From state after reading 'a' to itself on 'a'\n- From state after reading 'b' back to start or to state after reading 'a' followed by 'b'.\n\nGoddard 3a: 9Nondeterminism as 'Guess and Verify'\nThere are many ways to view nondeterminism. One way is the 'guess and verify' idea: We assume the Nondeterministic Finite Automaton (NFA) is clairvoyant and always guesses correctly the next state to go to. However, the NFA must 'check' its guesses.Nondeterminism via Computation Tree\n\nWe can think of nondeterminism as a tree growing downwards, with the children of a node representing its possible successors. The input is accepted exactly when at least one of the branches ends in an accept state.\n\nAccept\nReject\n\nGoddard 3a: 11More Nondeterminism: \u03b5-transitions\n\nWe also allow \u03b5-transitions: arrows labeled with the empty string. These allow the NFA (Nondeterministic Finite Automaton) to change state without consuming an input symbol.Example\nA\nB\nC\nD\n1\n\u03b5\n\u03b5\n0, 1\n0\nGoddard 3a: 13Example\n\nA\nB\nC\nD\n1\n\u03b5\n\u03b5\n0, 1\n0\n\nThis document accepts all binary strings where the last symbol is 0 or that contain only 1's.\n\nGoddard 3a: 14Another Example\n\nHere is another NFA for the expression a* + (ab)*:\n\n    \u03b5\n    a\n    \u03b5\n    a\n    b\n    \u03b5\n\nGoddard 3a: 15Formal Definition\n\nFormally, a Non-deterministic Finite Automaton (NFA) is defined as a 5-tuple (Q, \u03a3, q0, T, \u03b4) where:\n\n\u2022 Q is a finite set of states;\n\u2022 \u03a3 is the alphabet of input symbols;\n\u2022 q0 is the start state;\n\u2022 T is a subset of Q that represents the accept states;\n\u2022 \u03b4 is the transition function.\n\nThe transition function \u03b4 specifies a set of states rather than a single state: it maps the Cartesian product of Q and \u03a3 to the power set of Q (i.e., {subsets of Q}).Practice\n\nGive an NFA (Nondeterministic Finite Automaton) for the set of all binary strings that have either the number of 0\u2019s odd, or the number of 1\u2019s not a multiple of 3, or both.\n\nGoddard 3a: 17Solution to Practice\n\n1. \u03b5\n2. 0\n3. 0\n4. 1\n5. \u03b5\n6. 1\n7. 1\n8. 1\n9. 0\n10. 0\n11. 0\n\nGoddard 3a: 18Summary\nA nondeterministic finite automaton (NFA) can have zero, one, or multiple transitions corresponding to a particular symbol. It is defined to accept the input if there exists some choice of transitions that cause the machine to end up in an accept state. Nondeterminism can also be viewed as a tree, or as a 'guess-and-verify' concept. You can also have epsilon (\u03b5) transitions, where the NFA can change state without consuming an input symbol."