"Context-Free Grammars\n\nA grammar is a set of rules for putting strings together, and it corresponds to a language.Grammars\n\nA grammar consists of:\n\u2022 A set of variables (also called nonterminals), one of which is designated as the start variable. It is customary to use upper-case letters for variables.\n\u2022 A set of terminals (from the alphabet).\n\u2022 A list of productions (also called rules).Example: 0n1n\nHere is a grammar:\nS \u2192 0S1\nS \u2192 \u03b5\nS is the only variable. The terminals are 0 and 1.\nThere are two productions.\nGoddard 6a: 3Using a Grammar\n\nA production allows one to take a string containing a variable and replace the variable by the right-hand side (RHS) of the production. A string of terminals is generated by the grammar if, starting with the start variable, one can apply productions and end up with that string. The sequence of strings obtained in this way is called a derivation.\n\nWe focus on a special version of grammars called a context-free grammar (CFG). A language is context-free if it is generated by a CFG.Example Continued\n\nThe production rules for the grammar are:\n\nS \u2192 0S1\nS \u2192 \u03b5\n\nThe string 0011 is in the language generated by this grammar. The derivation is as follows:\n\nS \u21d2 0S1 \u21d2 00S11 \u21d2 0011\n\nFor compactness, we can write the production rules as:\n\nS \u2192 0S1 | \u03b5\n\nwhere the vertical bar means 'or.'Example: Palindromes\nLet P be the language of palindromes with alphabet {a, b}. One can determine a Context-Free Grammar (CFG) for P by finding a recursive decomposition. If we remove the first and last symbols from a palindrome, what remains is also a palindrome. Furthermore, if we wrap a palindrome with the same symbol at the front and back, it is still a palindrome.\nThe CFG is:\nP \u2192 aPa | bPb | \u03b5\nThis actually generates only those palindromes of even length.Formal Definition\nOne can provide a formal definition of a context-free grammar. It is a 4-tuple (V, \u03a3, S, P) where:\n\u2022 V is a finite set of variables;\n\u2022 \u03a3 is a finite alphabet of terminals;\n\u2022 S is the start variable; and\n\u2022 P is the finite set of productions. Each production has the form V \u2192 (V \u222a \u03a3)*.Further Examples: Even 0\u2019s\n\nA Context-Free Grammar (CFG) for all binary strings with an even number of 0\u2019s is given below. To find the decomposition:\n\n- If the first symbol is 1, then there remains an even number of 0\u2019s.\n- If the first symbol is 0, proceed to the next 0; after that, there will again be an even number of 0\u2019s remaining.\n\nThis yields the following productions:\n\nS \u2192 1S | 0A0S | \u03b5\nA \u2192 1A | \u03b5Alternate CFG for Even 0's\nHere is another Context-Free Grammar (CFG) for the same language. Note that when the first symbol is 0, what remains has an odd number of 0's.Alternate CFG for Even 0's\n\nHere is another Context-Free Grammar (CFG) for the same language.\nNote that when the first symbol is 0, what remains has an odd number of 0's.\n\nS \u2192 1S | 0T | \u03b5\nT \u2192 1T | 0SExample\nA Context-Free Grammar (CFG) for the regular language corresponding to the Regular Expression (RE) 00*11*.\nGoddard 6a: 11Example\nA Context-Free Grammar (CFG) for the regular language corresponding to the Regular Expression (RE) 00*11*.\nThe language is the concatenation of two languages: all strings of zeroes followed by all strings of ones.\n\nProductions:\nS \u2192 CD\nC \u2192 0C | 0\nD \u2192 1D | 1\n\nGoddard 6a: 12Example Complement\nA Context-Free Grammar (CFG) for the complement of the regular expression 00*11*.\n\nCFGs do not handle conjunctions (\"and\"), but they can handle disjunctions (\"or\"). A string that is not of the form 0^i1^j where i, j > 0 is one of the following: it contains the substring 10, it consists only of zeroes, or it consists only of ones. This leads to the following CFG:\n\nS \u2192 A | B | C\nA \u2192 D 10 D\nD \u2192 0 D | 1 D | \u03b5\nB \u2192 0 B | 0\nC \u2192 1 C | 1Consistency and Completeness\n\nNote that to check a grammar and description match, one must check two things: that everything the grammar generates fits the description (consistency), and everything in the description is generated by the grammar (completeness).\n\nGoddard 6a: 14Example\nConsider the context-free grammar (CFG):\n\nS \u2192 0S1S | 1S0S | \u03b5\n\nThe string 011100 is generated as follows:\n\nS \u21d2 0S1S \u21d2 01S \u21d2 011S0S \u21d2 0111S0S \u21d2 01110S0S \u21d2 011100S \u21d2 011100\n\nWhat does this language contain? Certainly, every string generated has an equal number of 0\u2019s and 1\u2019s. However, can any string with equal 0\u2019s and 1\u2019s be generated?Example Argument for Completeness\n\nYes. All strings with equal numbers of 0\u2019s and 1\u2019s are generated:\nWell, at some point, equality between 0\u2019s and 1\u2019s is reached. The key is that if a string starts with 0, then equality is first reached at a 1. So the portion between the first 0 and this 1 is itself an example of equality, as is the portion after this 1. That is, one can break up the string as 0w1x with both w and x in the language.\n\nThe break-up of the string 00101101 is as follows:\n0 0 1 0 1 1 0 1\nw x\n\nGoddard 6a: 16A Silly Language Context-Free Grammar (CFG) \n\nThis CFG generates sentences composed of noun phrases and verb phrases: \n\nS \u2192 NP VP \nNP \u2192 the N \nVP \u2192 V NP \nV \u2192 sings | eats \nN \u2192 cat | song | canary \n\nThis generates sentences like \"the canary sings the song\", but also \"the song eats the cat\". \n\nThis CFG generates all \"legal\" sentences, not just meaningful ones.Practice\n\nGive grammars for the following two languages:\n\n1. All binary strings with both an even number of zeroes and an even number of ones.\n\n2. All strings of the form 0^a 1^b 0^c where a + c = b. \n   (Hint: it\u2019s the concatenation of two simpler languages.)\n\nGoddard 6a: 18Practice Solutions\n\n1) The production rules are as follows:\n   S \u2192 0X | 1Y | \u03b5\n   X \u2192 0S | 1Z (odd zeroes, even ones)\n   Y \u2192 1S | 0Z (odd ones, even zeroes)\n   Z \u2192 0Y | 1X (odd ones, odd zeroes)\n\n2) The production rules are:\n   S \u2192 TU\n   T \u2192 0T1 | \u03b5\n   U \u2192 1U0 | \u03b5\n\nGoddard 6a: 19Summary\nA context-free grammar (CFG) consists of a set of productions that you use to replace a variable with a string of variables and terminals. The language of a grammar is the set of strings it generates. A language is context-free if there is a CFG for it."